\BOOKMARK [0][-]{chapter.1}{Identifying Reusable Language Modules from Existing Domain-Specific Languages}{}% 1
\BOOKMARK [1][-]{section.1.1}{Introduction}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Background: Domain-specific languages in a nutshell}{chapter.1}% 3
\BOOKMARK [2][-]{section*.2}{Specification.}{section.1.2}% 4
\BOOKMARK [3][-]{section*.3}{Technological space.}{section*.2}% 5
\BOOKMARK [3][-]{section*.4}{Implementation.}{section*.2}% 6
\BOOKMARK [3][-]{section*.5}{Example: A DSL for finite state machines.}{section*.2}% 7
\BOOKMARK [1][-]{section.1.3}{Motivation}{chapter.1}% 8
\BOOKMARK [1][-]{section.1.4}{Proposed approach}{chapter.1}% 9
\BOOKMARK [2][-]{subsection.1.4.1}{Identifying overlapping}{section.1.4}% 10
\BOOKMARK [3][-]{section*.10}{Comparison operators:}{subsection.1.4.1}% 11
\BOOKMARK [2][-]{subsection.1.4.2}{Breaking down the input set}{section.1.4}% 12
\BOOKMARK [2][-]{subsection.1.4.3}{Encapsulating language modules}{section.1.4}% 13
\BOOKMARK [1][-]{section.1.5}{Evaluation}{chapter.1}% 14
\BOOKMARK [2][-]{subsection.1.5.1}{Evaluating correctness: The state machines case study}{section.1.5}% 15
\BOOKMARK [3][-]{section*.12}{Oracle.}{subsection.1.5.1}% 16
\BOOKMARK [3][-]{section*.14}{Results.}{subsection.1.5.1}% 17
\BOOKMARK [2][-]{subsection.1.5.2}{Evaluating relevance: Identifying potential reuse in the wild}{section.1.5}% 18
\BOOKMARK [3][-]{section*.17}{Sample data:}{subsection.1.5.2}% 19
\BOOKMARK [3][-]{section*.18}{Q.1: What is the probability that a DSL share some commonalities with another one?}{subsection.1.5.2}% 20
\BOOKMARK [3][-]{section*.19}{Q.2: How big is the average of commonality shared by the existing DSLs?}{subsection.1.5.2}% 21
\BOOKMARK [3][-]{section*.20}{Execution platform:}{subsection.1.5.2}% 22
\BOOKMARK [1][-]{section.1.6}{Related work}{chapter.1}% 23
\BOOKMARK [1][-]{section.1.7}{Conclusions and Perspectives}{chapter.1}% 24
