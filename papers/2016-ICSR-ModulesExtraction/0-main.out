\BOOKMARK [0][-]{chapter.1}{Identifying Reusable Language Modules from Existing Domain-Specific Languages}{}% 1
\BOOKMARK [1][-]{section.1.1}{Introduction}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Background: Domain-specific languages in a nutshell}{chapter.1}% 3
\BOOKMARK [1][-]{section.1.3}{Motivation}{chapter.1}% 4
\BOOKMARK [1][-]{section.1.4}{Proposed approach}{chapter.1}% 5
\BOOKMARK [2][-]{subsection.1.4.1}{Identifying overlapping: match and merge}{section.1.4}% 6
\BOOKMARK [3][-]{section*.5}{Comparison of metaclasses:}{subsection.1.4.1}% 7
\BOOKMARK [3][-]{section*.6}{Comparison of domain-specific actions:}{subsection.1.4.1}% 8
\BOOKMARK [2][-]{subsection.1.4.2}{Breaking down the input set: cut and encapsulate}{section.1.4}% 9
\BOOKMARK [1][-]{section.1.5}{Evaluation}{chapter.1}% 10
\BOOKMARK [2][-]{subsection.1.5.1}{Implementation: The Puzzle tool-suite}{section.1.5}% 11
\BOOKMARK [2][-]{subsection.1.5.2}{Evaluating correctness: The state machines case study}{section.1.5}% 12
\BOOKMARK [2][-]{subsection.1.5.3}{Evaluating relevance: Identifying potential reuse in the wild}{section.1.5}% 13
\BOOKMARK [1][-]{section.1.6}{Related work}{chapter.1}% 14
\BOOKMARK [1][-]{section.1.7}{Conclusions and future work}{chapter.1}% 15
