/*
 * generated by Xtext
 */
package fr.inria.diverse.puzzle.adl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.inria.diverse.puzzle.adl.services.LanguageGrammarAccess;

public class LanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private LanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.inria.diverse.puzzle.adl.ui.contentassist.antlr.internal.InternalLanguageParser createParser() {
		fr.inria.diverse.puzzle.adl.ui.contentassist.antlr.internal.InternalLanguageParser result = new fr.inria.diverse.puzzle.adl.ui.contentassist.antlr.internal.InternalLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPuzzleCompositionAccess().getGroup(), "rule__PuzzleComposition__Group__0");
					put(grammarAccess.getPuzzleCompositionAccess().getGroup_3(), "rule__PuzzleComposition__Group_3__0");
					put(grammarAccess.getCompositeLanguageAccess().getGroup(), "rule__CompositeLanguage__Group__0");
					put(grammarAccess.getCompositeLanguageAccess().getGroup_4(), "rule__CompositeLanguage__Group_4__0");
					put(grammarAccess.getAggregationConnectorAccess().getGroup(), "rule__AggregationConnector__Group__0");
					put(grammarAccess.getPuzzleCompositionAccess().getMelangeFileAssignment_2(), "rule__PuzzleComposition__MelangeFileAssignment_2");
					put(grammarAccess.getPuzzleCompositionAccess().getCompositesAssignment_3_0(), "rule__PuzzleComposition__CompositesAssignment_3_0");
					put(grammarAccess.getPuzzleCompositionAccess().getCompositesAssignment_3_1(), "rule__PuzzleComposition__CompositesAssignment_3_1");
					put(grammarAccess.getCompositeLanguageAccess().getNameAssignment_2(), "rule__CompositeLanguage__NameAssignment_2");
					put(grammarAccess.getCompositeLanguageAccess().getLinksAssignment_4_0(), "rule__CompositeLanguage__LinksAssignment_4_0");
					put(grammarAccess.getCompositeLanguageAccess().getLinksAssignment_4_1(), "rule__CompositeLanguage__LinksAssignment_4_1");
					put(grammarAccess.getAggregationConnectorAccess().getLeftAssignment_2(), "rule__AggregationConnector__LeftAssignment_2");
					put(grammarAccess.getAggregationConnectorAccess().getRightAssignment_4(), "rule__AggregationConnector__RightAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.inria.diverse.puzzle.adl.ui.contentassist.antlr.internal.InternalLanguageParser typedParser = (fr.inria.diverse.puzzle.adl.ui.contentassist.antlr.internal.InternalLanguageParser) parser;
			typedParser.entryRulePuzzleComposition();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
