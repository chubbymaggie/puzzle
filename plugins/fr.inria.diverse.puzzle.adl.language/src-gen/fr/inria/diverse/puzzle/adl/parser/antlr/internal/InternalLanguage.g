/*
 * generated by Xtext
 */
grammar InternalLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.inria.diverse.puzzle.adl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.puzzle.adl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.puzzle.adl.services.LanguageGrammarAccess;

}

@parser::members {

 	private LanguageGrammarAccess grammarAccess;
 	
    public InternalLanguageParser(TokenStream input, LanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PuzzleComposition";	
   	}
   	
   	@Override
   	protected LanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePuzzleComposition
entryRulePuzzleComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPuzzleCompositionRule()); }
	 iv_rulePuzzleComposition=rulePuzzleComposition 
	 { $current=$iv_rulePuzzleComposition.current; } 
	 EOF 
;

// Rule PuzzleComposition
rulePuzzleComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPuzzleCompositionAccess().getPuzzleCompositionAction_0(),
            $current);
    }
)	otherlv_1='import' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPuzzleCompositionAccess().getImportKeyword_1());
    }
(
(
		lv_melangeFile_2_0=RULE_STRING
		{
			newLeafNode(lv_melangeFile_2_0, grammarAccess.getPuzzleCompositionAccess().getMelangeFileSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPuzzleCompositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"melangeFile",
        		lv_melangeFile_2_0, 
        		"STRING");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPuzzleCompositionAccess().getCompositesCompositeLanguageParserRuleCall_3_0_0()); 
	    }
		lv_composites_3_0=ruleCompositeLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPuzzleCompositionRule());
	        }
       		add(
       			$current, 
       			"composites",
        		lv_composites_3_0, 
        		"CompositeLanguage");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPuzzleCompositionAccess().getCompositesCompositeLanguageParserRuleCall_3_1_0()); 
	    }
		lv_composites_4_0=ruleCompositeLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPuzzleCompositionRule());
	        }
       		add(
       			$current, 
       			"composites",
        		lv_composites_4_0, 
        		"CompositeLanguage");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleCompositeLanguage
entryRuleCompositeLanguage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeLanguageRule()); }
	 iv_ruleCompositeLanguage=ruleCompositeLanguage 
	 { $current=$iv_ruleCompositeLanguage.current; } 
	 EOF 
;

// Rule CompositeLanguage
ruleCompositeLanguage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompositeLanguageAccess().getCompositeLanguageAction_0(),
            $current);
    }
)	otherlv_1='composite' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompositeLanguageAccess().getCompositeKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCompositeLanguageAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompositeLanguageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCompositeLanguageAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeLanguageAccess().getLinksConnectorParserRuleCall_4_0_0()); 
	    }
		lv_links_4_0=ruleConnector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeLanguageRule());
	        }
       		add(
       			$current, 
       			"links",
        		lv_links_4_0, 
        		"Connector");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeLanguageAccess().getLinksConnectorParserRuleCall_4_1_0()); 
	    }
		lv_links_5_0=ruleConnector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeLanguageRule());
	        }
       		add(
       			$current, 
       			"links",
        		lv_links_5_0, 
        		"Connector");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCompositeLanguageAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	 iv_ruleConnector=ruleConnector 
	 { $current=$iv_ruleConnector.current; } 
	 EOF 
;

// Rule Connector
ruleConnector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConnectorAccess().getAggregationConnectorParserRuleCall()); 
    }
    this_AggregationConnector_0=ruleAggregationConnector
    { 
        $current = $this_AggregationConnector_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAggregationConnector
entryRuleAggregationConnector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregationConnectorRule()); }
	 iv_ruleAggregationConnector=ruleAggregationConnector 
	 { $current=$iv_ruleAggregationConnector.current; } 
	 EOF 
;

// Rule AggregationConnector
ruleAggregationConnector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='connector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAggregationConnectorAccess().getConnectorKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAggregationConnectorAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_left_2_0=RULE_ID
		{
			newLeafNode(lv_left_2_0, grammarAccess.getAggregationConnectorAccess().getLeftIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregationConnectorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"ID");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAggregationConnectorAccess().getCommaKeyword_3());
    }
(
(
		lv_right_4_0=RULE_ID
		{
			newLeafNode(lv_right_4_0, grammarAccess.getAggregationConnectorAccess().getRightIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregationConnectorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"ID");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAggregationConnectorAccess().getRightParenthesisKeyword_5());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


