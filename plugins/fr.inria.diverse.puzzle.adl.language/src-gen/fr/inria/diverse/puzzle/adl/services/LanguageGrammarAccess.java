/*
 * generated by Xtext
 */
package fr.inria.diverse.puzzle.adl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PuzzleCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PuzzleComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPuzzleCompositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMelangeFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMelangeFileSTRINGTerminalRuleCall_2_0 = (RuleCall)cMelangeFileAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCompositesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCompositesCompositeLanguageParserRuleCall_3_0_0 = (RuleCall)cCompositesAssignment_3_0.eContents().get(0);
		private final Assignment cCompositesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCompositesCompositeLanguageParserRuleCall_3_1_0 = (RuleCall)cCompositesAssignment_3_1.eContents().get(0);
		
		//PuzzleComposition:
		//	{PuzzleComposition} "import" melangeFile=STRING (composites+=CompositeLanguage composites+=CompositeLanguage*)?;
		@Override public ParserRule getRule() { return rule; }

		//{PuzzleComposition} "import" melangeFile=STRING (composites+=CompositeLanguage composites+=CompositeLanguage*)?
		public Group getGroup() { return cGroup; }

		//{PuzzleComposition}
		public Action getPuzzleCompositionAction_0() { return cPuzzleCompositionAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//melangeFile=STRING
		public Assignment getMelangeFileAssignment_2() { return cMelangeFileAssignment_2; }

		//STRING
		public RuleCall getMelangeFileSTRINGTerminalRuleCall_2_0() { return cMelangeFileSTRINGTerminalRuleCall_2_0; }

		//(composites+=CompositeLanguage composites+=CompositeLanguage*)?
		public Group getGroup_3() { return cGroup_3; }

		//composites+=CompositeLanguage
		public Assignment getCompositesAssignment_3_0() { return cCompositesAssignment_3_0; }

		//CompositeLanguage
		public RuleCall getCompositesCompositeLanguageParserRuleCall_3_0_0() { return cCompositesCompositeLanguageParserRuleCall_3_0_0; }

		//composites+=CompositeLanguage*
		public Assignment getCompositesAssignment_3_1() { return cCompositesAssignment_3_1; }

		//CompositeLanguage
		public RuleCall getCompositesCompositeLanguageParserRuleCall_3_1_0() { return cCompositesCompositeLanguageParserRuleCall_3_1_0; }
	}

	public class CompositeLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeLanguage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeLanguageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLinksAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLinksConnectorParserRuleCall_4_0_0 = (RuleCall)cLinksAssignment_4_0.eContents().get(0);
		private final Assignment cLinksAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLinksConnectorParserRuleCall_4_1_0 = (RuleCall)cLinksAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CompositeLanguage:
		//	{CompositeLanguage} "composite" name=ID "{" (links+=Connector links+=Connector*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{CompositeLanguage} "composite" name=ID "{" (links+=Connector links+=Connector*)? "}"
		public Group getGroup() { return cGroup; }

		//{CompositeLanguage}
		public Action getCompositeLanguageAction_0() { return cCompositeLanguageAction_0; }

		//"composite"
		public Keyword getCompositeKeyword_1() { return cCompositeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(links+=Connector links+=Connector*)?
		public Group getGroup_4() { return cGroup_4; }

		//links+=Connector
		public Assignment getLinksAssignment_4_0() { return cLinksAssignment_4_0; }

		//Connector
		public RuleCall getLinksConnectorParserRuleCall_4_0_0() { return cLinksConnectorParserRuleCall_4_0_0; }

		//links+=Connector*
		public Assignment getLinksAssignment_4_1() { return cLinksAssignment_4_1; }

		//Connector
		public RuleCall getLinksConnectorParserRuleCall_4_1_0() { return cLinksConnectorParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connector");
		private final RuleCall cAggregationConnectorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Connector:
		//	AggregationConnector;
		@Override public ParserRule getRule() { return rule; }

		//AggregationConnector
		public RuleCall getAggregationConnectorParserRuleCall() { return cAggregationConnectorParserRuleCall; }
	}

	public class AggregationConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregationConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftIDTerminalRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightIDTerminalRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AggregationConnector:
		//	"connector" "(" left=ID "," right=ID ")";
		@Override public ParserRule getRule() { return rule; }

		//"connector" "(" left=ID "," right=ID ")"
		public Group getGroup() { return cGroup; }

		//"connector"
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//left=ID
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//ID
		public RuleCall getLeftIDTerminalRuleCall_2_0() { return cLeftIDTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//right=ID
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//ID
		public RuleCall getRightIDTerminalRuleCall_4_0() { return cRightIDTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	private final PuzzleCompositionElements pPuzzleComposition;
	private final CompositeLanguageElements pCompositeLanguage;
	private final ConnectorElements pConnector;
	private final AggregationConnectorElements pAggregationConnector;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPuzzleComposition = new PuzzleCompositionElements();
		this.pCompositeLanguage = new CompositeLanguageElements();
		this.pConnector = new ConnectorElements();
		this.pAggregationConnector = new AggregationConnectorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.puzzle.adl.Language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PuzzleComposition:
	//	{PuzzleComposition} "import" melangeFile=STRING (composites+=CompositeLanguage composites+=CompositeLanguage*)?;
	public PuzzleCompositionElements getPuzzleCompositionAccess() {
		return pPuzzleComposition;
	}
	
	public ParserRule getPuzzleCompositionRule() {
		return getPuzzleCompositionAccess().getRule();
	}

	//CompositeLanguage:
	//	{CompositeLanguage} "composite" name=ID "{" (links+=Connector links+=Connector*)? "}";
	public CompositeLanguageElements getCompositeLanguageAccess() {
		return pCompositeLanguage;
	}
	
	public ParserRule getCompositeLanguageRule() {
		return getCompositeLanguageAccess().getRule();
	}

	//Connector:
	//	AggregationConnector;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}

	//AggregationConnector:
	//	"connector" "(" left=ID "," right=ID ")";
	public AggregationConnectorElements getAggregationConnectorAccess() {
		return pAggregationConnector;
	}
	
	public ParserRule getAggregationConnectorRule() {
		return getAggregationConnectorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
