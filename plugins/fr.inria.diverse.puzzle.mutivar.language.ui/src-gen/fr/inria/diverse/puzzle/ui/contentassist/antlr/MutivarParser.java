/*
 * generated by Xtext
 */
package fr.inria.diverse.puzzle.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.inria.diverse.puzzle.services.MutivarGrammarAccess;

public class MutivarParser extends AbstractContentAssistParser {
	
	@Inject
	private MutivarGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.inria.diverse.puzzle.ui.contentassist.antlr.internal.InternalMutivarParser createParser() {
		fr.inria.diverse.puzzle.ui.contentassist.antlr.internal.InternalMutivarParser result = new fr.inria.diverse.puzzle.ui.contentassist.antlr.internal.InternalMutivarParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRelationAccess().getAlternatives(), "rule__Relation__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getLanguageProductLineAccess().getGroup(), "rule__LanguageProductLine__Group__0");
					put(grammarAccess.getLanguageProductLineAccess().getGroup_1(), "rule__LanguageProductLine__Group_1__0");
					put(grammarAccess.getLanguageProductLineAccess().getGroup_2(), "rule__LanguageProductLine__Group_2__0");
					put(grammarAccess.getLanguageProductLineAccess().getGroup_3(), "rule__LanguageProductLine__Group_3__0");
					put(grammarAccess.getProductLineVariabilityAccess().getGroup(), "rule__ProductLineVariability__Group__0");
					put(grammarAccess.getLanguageVariabilityAccess().getGroup(), "rule__LanguageVariability__Group__0");
					put(grammarAccess.getLanguageVariabilityAccess().getGroup_2(), "rule__LanguageVariability__Group_2__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup(), "rule__LanguageFeature__Group__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup_4(), "rule__LanguageFeature__Group_4__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup_4_2(), "rule__LanguageFeature__Group_4_2__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup_5(), "rule__LanguageFeature__Group_5__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup_5_2(), "rule__LanguageFeature__Group_5_2__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup_7(), "rule__LanguageFeature__Group_7__0");
					put(grammarAccess.getLanguageFeatureAccess().getGroup_8(), "rule__LanguageFeature__Group_8__0");
					put(grammarAccess.getMandatoryChildAccess().getGroup(), "rule__MandatoryChild__Group__0");
					put(grammarAccess.getOptionalChildAccess().getGroup(), "rule__OptionalChild__Group__0");
					put(grammarAccess.getOrGroupChildAccess().getGroup(), "rule__OrGroupChild__Group__0");
					put(grammarAccess.getOrGroupChildAccess().getGroup_3(), "rule__OrGroupChild__Group_3__0");
					put(grammarAccess.getAlternativeGroupAccess().getGroup(), "rule__AlternativeGroup__Group__0");
					put(grammarAccess.getAlternativeGroupAccess().getGroup_3(), "rule__AlternativeGroup__Group_3__0");
					put(grammarAccess.getVariabilityPointAccess().getGroup(), "rule__VariabilityPoint__Group__0");
					put(grammarAccess.getVariabilityPointAccess().getGroup_2(), "rule__VariabilityPoint__Group_2__0");
					put(grammarAccess.getVariabilityPointAccess().getGroup_2_2(), "rule__VariabilityPoint__Group_2_2__0");
					put(grammarAccess.getVariationAccess().getGroup(), "rule__Variation__Group__0");
					put(grammarAccess.getVariationAccess().getGroup_4(), "rule__Variation__Group_4__0");
					put(grammarAccess.getLanguageProductLineAccess().getImplementationFileAssignment_1_1(), "rule__LanguageProductLine__ImplementationFileAssignment_1_1");
					put(grammarAccess.getLanguageProductLineAccess().getProductLineVariabilityAssignment_2_1(), "rule__LanguageProductLine__ProductLineVariabilityAssignment_2_1");
					put(grammarAccess.getLanguageProductLineAccess().getLanguageVariabilityAssignment_3_1(), "rule__LanguageProductLine__LanguageVariabilityAssignment_3_1");
					put(grammarAccess.getProductLineVariabilityAccess().getFeaturesAssignment_1(), "rule__ProductLineVariability__FeaturesAssignment_1");
					put(grammarAccess.getProductLineVariabilityAccess().getFeaturesAssignment_2(), "rule__ProductLineVariability__FeaturesAssignment_2");
					put(grammarAccess.getProductLineVariabilityAccess().getRootFeatureAssignment_4(), "rule__ProductLineVariability__RootFeatureAssignment_4");
					put(grammarAccess.getLanguageVariabilityAccess().getVariabilityPointsAssignment_2_0(), "rule__LanguageVariability__VariabilityPointsAssignment_2_0");
					put(grammarAccess.getLanguageVariabilityAccess().getVariabilityPointsAssignment_2_1(), "rule__LanguageVariability__VariabilityPointsAssignment_2_1");
					put(grammarAccess.getLanguageFeatureAccess().getAbstractAssignment_1(), "rule__LanguageFeature__AbstractAssignment_1");
					put(grammarAccess.getLanguageFeatureAccess().getNameAssignment_3(), "rule__LanguageFeature__NameAssignment_3");
					put(grammarAccess.getLanguageFeatureAccess().getDependsAssignment_4_1(), "rule__LanguageFeature__DependsAssignment_4_1");
					put(grammarAccess.getLanguageFeatureAccess().getDependsAssignment_4_2_1(), "rule__LanguageFeature__DependsAssignment_4_2_1");
					put(grammarAccess.getLanguageFeatureAccess().getExcludesAssignment_5_1(), "rule__LanguageFeature__ExcludesAssignment_5_1");
					put(grammarAccess.getLanguageFeatureAccess().getExcludesAssignment_5_2_1(), "rule__LanguageFeature__ExcludesAssignment_5_2_1");
					put(grammarAccess.getLanguageFeatureAccess().getModuleAssignment_7_1(), "rule__LanguageFeature__ModuleAssignment_7_1");
					put(grammarAccess.getLanguageFeatureAccess().getChildrenAssignment_8_2(), "rule__LanguageFeature__ChildrenAssignment_8_2");
					put(grammarAccess.getLanguageFeatureAccess().getChildrenAssignment_8_3(), "rule__LanguageFeature__ChildrenAssignment_8_3");
					put(grammarAccess.getMandatoryChildAccess().getFeatureAssignment_1(), "rule__MandatoryChild__FeatureAssignment_1");
					put(grammarAccess.getOptionalChildAccess().getFeatureAssignment_1(), "rule__OptionalChild__FeatureAssignment_1");
					put(grammarAccess.getOrGroupChildAccess().getFeaturesAssignment_2(), "rule__OrGroupChild__FeaturesAssignment_2");
					put(grammarAccess.getOrGroupChildAccess().getFeaturesAssignment_3_1(), "rule__OrGroupChild__FeaturesAssignment_3_1");
					put(grammarAccess.getAlternativeGroupAccess().getFeaturesAssignment_2(), "rule__AlternativeGroup__FeaturesAssignment_2");
					put(grammarAccess.getAlternativeGroupAccess().getFeaturesAssignment_3_1(), "rule__AlternativeGroup__FeaturesAssignment_3_1");
					put(grammarAccess.getVariabilityPointAccess().getNameAssignment_1(), "rule__VariabilityPoint__NameAssignment_1");
					put(grammarAccess.getVariabilityPointAccess().getInvolvedFeaturesAssignment_2_1(), "rule__VariabilityPoint__InvolvedFeaturesAssignment_2_1");
					put(grammarAccess.getVariabilityPointAccess().getInvolvedFeaturesAssignment_2_2_1(), "rule__VariabilityPoint__InvolvedFeaturesAssignment_2_2_1");
					put(grammarAccess.getVariabilityPointAccess().getVariationsAssignment_4(), "rule__VariabilityPoint__VariationsAssignment_4");
					put(grammarAccess.getVariabilityPointAccess().getVariationsAssignment_5(), "rule__VariabilityPoint__VariationsAssignment_5");
					put(grammarAccess.getVariationAccess().getDefaultAssignment_1(), "rule__Variation__DefaultAssignment_1");
					put(grammarAccess.getVariationAccess().getNameAssignment_3(), "rule__Variation__NameAssignment_3");
					put(grammarAccess.getVariationAccess().getModuleAssignment_4_1(), "rule__Variation__ModuleAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.inria.diverse.puzzle.ui.contentassist.antlr.internal.InternalMutivarParser typedParser = (fr.inria.diverse.puzzle.ui.contentassist.antlr.internal.InternalMutivarParser) parser;
			typedParser.entryRuleLanguageProductLine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MutivarGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MutivarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
