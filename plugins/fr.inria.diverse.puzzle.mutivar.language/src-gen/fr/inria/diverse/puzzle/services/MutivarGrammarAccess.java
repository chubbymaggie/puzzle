/*
 * generated by Xtext
 */
package fr.inria.diverse.puzzle.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MutivarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LanguageProductLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageProductLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLanguageProductLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImplementationFileAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImplementationFileEStringParserRuleCall_1_1_0 = (RuleCall)cImplementationFileAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLanguagefeaturesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProductLineVariabilityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProductLineVariabilityProductLineVariabilityParserRuleCall_2_1_0 = (RuleCall)cProductLineVariabilityAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrthogonalvariabilityKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLanguageVariabilityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLanguageVariabilityLanguageVariabilityParserRuleCall_3_1_0 = (RuleCall)cLanguageVariabilityAssignment_3_1.eContents().get(0);
		
		//LanguageProductLine:
		//	{LanguageProductLine} ("import" implementationFile=EString)? ("languagefeatures"
		//	productLineVariability=ProductLineVariability)? ("orthogonalvariability" languageVariability=LanguageVariability)?;
		@Override public ParserRule getRule() { return rule; }

		//{LanguageProductLine} ("import" implementationFile=EString)? ("languagefeatures"
		//productLineVariability=ProductLineVariability)? ("orthogonalvariability" languageVariability=LanguageVariability)?
		public Group getGroup() { return cGroup; }

		//{LanguageProductLine}
		public Action getLanguageProductLineAction_0() { return cLanguageProductLineAction_0; }

		//("import" implementationFile=EString)?
		public Group getGroup_1() { return cGroup_1; }

		//"import"
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }

		//implementationFile=EString
		public Assignment getImplementationFileAssignment_1_1() { return cImplementationFileAssignment_1_1; }

		//EString
		public RuleCall getImplementationFileEStringParserRuleCall_1_1_0() { return cImplementationFileEStringParserRuleCall_1_1_0; }

		//("languagefeatures" productLineVariability=ProductLineVariability)?
		public Group getGroup_2() { return cGroup_2; }

		//"languagefeatures"
		public Keyword getLanguagefeaturesKeyword_2_0() { return cLanguagefeaturesKeyword_2_0; }

		//productLineVariability=ProductLineVariability
		public Assignment getProductLineVariabilityAssignment_2_1() { return cProductLineVariabilityAssignment_2_1; }

		//ProductLineVariability
		public RuleCall getProductLineVariabilityProductLineVariabilityParserRuleCall_2_1_0() { return cProductLineVariabilityProductLineVariabilityParserRuleCall_2_1_0; }

		//("orthogonalvariability" languageVariability=LanguageVariability)?
		public Group getGroup_3() { return cGroup_3; }

		//"orthogonalvariability"
		public Keyword getOrthogonalvariabilityKeyword_3_0() { return cOrthogonalvariabilityKeyword_3_0; }

		//languageVariability=LanguageVariability
		public Assignment getLanguageVariabilityAssignment_3_1() { return cLanguageVariabilityAssignment_3_1; }

		//LanguageVariability
		public RuleCall getLanguageVariabilityLanguageVariabilityParserRuleCall_3_1_0() { return cLanguageVariabilityLanguageVariabilityParserRuleCall_3_1_0; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryChildParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalChildParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrGroupChildParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAlternativeGroupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Relation:
		//	MandatoryChild | OptionalChild | OrGroupChild | AlternativeGroup;
		@Override public ParserRule getRule() { return rule; }

		//MandatoryChild | OptionalChild | OrGroupChild | AlternativeGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//MandatoryChild
		public RuleCall getMandatoryChildParserRuleCall_0() { return cMandatoryChildParserRuleCall_0; }

		//OptionalChild
		public RuleCall getOptionalChildParserRuleCall_1() { return cOptionalChildParserRuleCall_1; }

		//OrGroupChild
		public RuleCall getOrGroupChildParserRuleCall_2() { return cOrGroupChildParserRuleCall_2; }

		//AlternativeGroup
		public RuleCall getAlternativeGroupParserRuleCall_3() { return cAlternativeGroupParserRuleCall_3; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ProductLineVariabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProductLineVariability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesLanguageFeatureParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesLanguageFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRootKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRootFeatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRootFeatureLanguageFeatureCrossReference_4_0 = (CrossReference)cRootFeatureAssignment_4.eContents().get(0);
		private final RuleCall cRootFeatureLanguageFeatureEStringParserRuleCall_4_0_1 = (RuleCall)cRootFeatureLanguageFeatureCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProductLineVariability:
		//	"{" features+=LanguageFeature features+=LanguageFeature* "root" rootFeature=[LanguageFeature|EString] "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" features+=LanguageFeature features+=LanguageFeature* "root" rootFeature=[LanguageFeature|EString] "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//features+=LanguageFeature
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//LanguageFeature
		public RuleCall getFeaturesLanguageFeatureParserRuleCall_1_0() { return cFeaturesLanguageFeatureParserRuleCall_1_0; }

		//features+=LanguageFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//LanguageFeature
		public RuleCall getFeaturesLanguageFeatureParserRuleCall_2_0() { return cFeaturesLanguageFeatureParserRuleCall_2_0; }

		//"root"
		public Keyword getRootKeyword_3() { return cRootKeyword_3; }

		//rootFeature=[LanguageFeature|EString]
		public Assignment getRootFeatureAssignment_4() { return cRootFeatureAssignment_4; }

		//[LanguageFeature|EString]
		public CrossReference getRootFeatureLanguageFeatureCrossReference_4_0() { return cRootFeatureLanguageFeatureCrossReference_4_0; }

		//EString
		public RuleCall getRootFeatureLanguageFeatureEStringParserRuleCall_4_0_1() { return cRootFeatureLanguageFeatureEStringParserRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LanguageVariabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageVariability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLanguageVariabilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariabilityPointsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariabilityPointsVariabilityPointParserRuleCall_2_0_0 = (RuleCall)cVariabilityPointsAssignment_2_0.eContents().get(0);
		private final Assignment cVariabilityPointsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariabilityPointsVariabilityPointParserRuleCall_2_1_0 = (RuleCall)cVariabilityPointsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LanguageVariability:
		//	{LanguageVariability} "{" (variabilityPoints+=VariabilityPoint variabilityPoints+=VariabilityPoint*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{LanguageVariability} "{" (variabilityPoints+=VariabilityPoint variabilityPoints+=VariabilityPoint*)? "}"
		public Group getGroup() { return cGroup; }

		//{LanguageVariability}
		public Action getLanguageVariabilityAction_0() { return cLanguageVariabilityAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(variabilityPoints+=VariabilityPoint variabilityPoints+=VariabilityPoint*)?
		public Group getGroup_2() { return cGroup_2; }

		//variabilityPoints+=VariabilityPoint
		public Assignment getVariabilityPointsAssignment_2_0() { return cVariabilityPointsAssignment_2_0; }

		//VariabilityPoint
		public RuleCall getVariabilityPointsVariabilityPointParserRuleCall_2_0_0() { return cVariabilityPointsVariabilityPointParserRuleCall_2_0_0; }

		//variabilityPoints+=VariabilityPoint*
		public Assignment getVariabilityPointsAssignment_2_1() { return cVariabilityPointsAssignment_2_1; }

		//VariabilityPoint
		public RuleCall getVariabilityPointsVariabilityPointParserRuleCall_2_1_0() { return cVariabilityPointsVariabilityPointParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LanguageFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLanguageFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cLanguagefeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRequiresKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDependsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDependsLanguageFeatureCrossReference_4_1_0 = (CrossReference)cDependsAssignment_4_1.eContents().get(0);
		private final RuleCall cDependsLanguageFeatureEStringParserRuleCall_4_1_0_1 = (RuleCall)cDependsLanguageFeatureCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cDependsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cDependsLanguageFeatureCrossReference_4_2_1_0 = (CrossReference)cDependsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cDependsLanguageFeatureEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cDependsLanguageFeatureCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExcludesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExcludesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cExcludesLanguageFeatureCrossReference_5_1_0 = (CrossReference)cExcludesAssignment_5_1.eContents().get(0);
		private final RuleCall cExcludesLanguageFeatureEStringParserRuleCall_5_1_0_1 = (RuleCall)cExcludesLanguageFeatureCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cExcludesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cExcludesLanguageFeatureCrossReference_5_2_1_0 = (CrossReference)cExcludesAssignment_5_2_1.eContents().get(0);
		private final RuleCall cExcludesLanguageFeatureEStringParserRuleCall_5_2_1_0_1 = (RuleCall)cExcludesLanguageFeatureCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLanguagemoduleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cModuleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cModuleEStringParserRuleCall_7_1_0 = (RuleCall)cModuleAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cChildrenKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cChildrenAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cChildrenRelationParserRuleCall_8_2_0 = (RuleCall)cChildrenAssignment_8_2.eContents().get(0);
		private final Assignment cChildrenAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cChildrenRelationParserRuleCall_8_3_0 = (RuleCall)cChildrenAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//LanguageFeature:
		//	{LanguageFeature} abstract?="abstract"? "languagefeature" name=EString ("requires" depends+=[LanguageFeature|EString]
		//	("," depends+=[LanguageFeature|EString])*)? ("excludes" excludes+=[LanguageFeature|EString] (","
		//	excludes+=[LanguageFeature|EString])*)? "{" ("languagemodule" module=EString)? ("children" "{" children+=Relation
		//	children+=Relation* "}")? "}";
		@Override public ParserRule getRule() { return rule; }

		//{LanguageFeature} abstract?="abstract"? "languagefeature" name=EString ("requires" depends+=[LanguageFeature|EString]
		//("," depends+=[LanguageFeature|EString])*)? ("excludes" excludes+=[LanguageFeature|EString] (","
		//excludes+=[LanguageFeature|EString])*)? "{" ("languagemodule" module=EString)? ("children" "{" children+=Relation
		//children+=Relation* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{LanguageFeature}
		public Action getLanguageFeatureAction_0() { return cLanguageFeatureAction_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }

		//"languagefeature"
		public Keyword getLanguagefeatureKeyword_2() { return cLanguagefeatureKeyword_2; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }

		//("requires" depends+=[LanguageFeature|EString] ("," depends+=[LanguageFeature|EString])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"requires"
		public Keyword getRequiresKeyword_4_0() { return cRequiresKeyword_4_0; }

		//depends+=[LanguageFeature|EString]
		public Assignment getDependsAssignment_4_1() { return cDependsAssignment_4_1; }

		//[LanguageFeature|EString]
		public CrossReference getDependsLanguageFeatureCrossReference_4_1_0() { return cDependsLanguageFeatureCrossReference_4_1_0; }

		//EString
		public RuleCall getDependsLanguageFeatureEStringParserRuleCall_4_1_0_1() { return cDependsLanguageFeatureEStringParserRuleCall_4_1_0_1; }

		//("," depends+=[LanguageFeature|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//depends+=[LanguageFeature|EString]
		public Assignment getDependsAssignment_4_2_1() { return cDependsAssignment_4_2_1; }

		//[LanguageFeature|EString]
		public CrossReference getDependsLanguageFeatureCrossReference_4_2_1_0() { return cDependsLanguageFeatureCrossReference_4_2_1_0; }

		//EString
		public RuleCall getDependsLanguageFeatureEStringParserRuleCall_4_2_1_0_1() { return cDependsLanguageFeatureEStringParserRuleCall_4_2_1_0_1; }

		//("excludes" excludes+=[LanguageFeature|EString] ("," excludes+=[LanguageFeature|EString])*)?
		public Group getGroup_5() { return cGroup_5; }

		//"excludes"
		public Keyword getExcludesKeyword_5_0() { return cExcludesKeyword_5_0; }

		//excludes+=[LanguageFeature|EString]
		public Assignment getExcludesAssignment_5_1() { return cExcludesAssignment_5_1; }

		//[LanguageFeature|EString]
		public CrossReference getExcludesLanguageFeatureCrossReference_5_1_0() { return cExcludesLanguageFeatureCrossReference_5_1_0; }

		//EString
		public RuleCall getExcludesLanguageFeatureEStringParserRuleCall_5_1_0_1() { return cExcludesLanguageFeatureEStringParserRuleCall_5_1_0_1; }

		//("," excludes+=[LanguageFeature|EString])*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//excludes+=[LanguageFeature|EString]
		public Assignment getExcludesAssignment_5_2_1() { return cExcludesAssignment_5_2_1; }

		//[LanguageFeature|EString]
		public CrossReference getExcludesLanguageFeatureCrossReference_5_2_1_0() { return cExcludesLanguageFeatureCrossReference_5_2_1_0; }

		//EString
		public RuleCall getExcludesLanguageFeatureEStringParserRuleCall_5_2_1_0_1() { return cExcludesLanguageFeatureEStringParserRuleCall_5_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//("languagemodule" module=EString)?
		public Group getGroup_7() { return cGroup_7; }

		//"languagemodule"
		public Keyword getLanguagemoduleKeyword_7_0() { return cLanguagemoduleKeyword_7_0; }

		//module=EString
		public Assignment getModuleAssignment_7_1() { return cModuleAssignment_7_1; }

		//EString
		public RuleCall getModuleEStringParserRuleCall_7_1_0() { return cModuleEStringParserRuleCall_7_1_0; }

		//("children" "{" children+=Relation children+=Relation* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"children"
		public Keyword getChildrenKeyword_8_0() { return cChildrenKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//children+=Relation
		public Assignment getChildrenAssignment_8_2() { return cChildrenAssignment_8_2; }

		//Relation
		public RuleCall getChildrenRelationParserRuleCall_8_2_0() { return cChildrenRelationParserRuleCall_8_2_0; }

		//children+=Relation*
		public Assignment getChildrenAssignment_8_3() { return cChildrenAssignment_8_3; }

		//Relation
		public RuleCall getChildrenRelationParserRuleCall_8_3_0() { return cChildrenRelationParserRuleCall_8_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class MandatoryChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MandatoryChild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureLanguageFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureLanguageFeatureEStringParserRuleCall_1_0_1 = (RuleCall)cFeatureLanguageFeatureCrossReference_1_0.eContents().get(1);
		
		//MandatoryChild:
		//	"mandatory" feature=[LanguageFeature|EString];
		@Override public ParserRule getRule() { return rule; }

		//"mandatory" feature=[LanguageFeature|EString]
		public Group getGroup() { return cGroup; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//feature=[LanguageFeature|EString]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[LanguageFeature|EString]
		public CrossReference getFeatureLanguageFeatureCrossReference_1_0() { return cFeatureLanguageFeatureCrossReference_1_0; }

		//EString
		public RuleCall getFeatureLanguageFeatureEStringParserRuleCall_1_0_1() { return cFeatureLanguageFeatureEStringParserRuleCall_1_0_1; }
	}

	public class OptionalChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalChild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureLanguageFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureLanguageFeatureEStringParserRuleCall_1_0_1 = (RuleCall)cFeatureLanguageFeatureCrossReference_1_0.eContents().get(1);
		
		//OptionalChild:
		//	"optional" feature=[LanguageFeature|EString];
		@Override public ParserRule getRule() { return rule; }

		//"optional" feature=[LanguageFeature|EString]
		public Group getGroup() { return cGroup; }

		//"optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//feature=[LanguageFeature|EString]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[LanguageFeature|EString]
		public CrossReference getFeatureLanguageFeatureCrossReference_1_0() { return cFeatureLanguageFeatureCrossReference_1_0; }

		//EString
		public RuleCall getFeatureLanguageFeatureEStringParserRuleCall_1_0_1() { return cFeatureLanguageFeatureEStringParserRuleCall_1_0_1; }
	}

	public class OrGroupChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrGroupChild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeaturesLanguageFeatureCrossReference_2_0 = (CrossReference)cFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cFeaturesLanguageFeatureEStringParserRuleCall_2_0_1 = (RuleCall)cFeaturesLanguageFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFeaturesLanguageFeatureCrossReference_3_1_0 = (CrossReference)cFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cFeaturesLanguageFeatureEStringParserRuleCall_3_1_0_1 = (RuleCall)cFeaturesLanguageFeatureCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrGroupChild:
		//	"or" "(" features+=[LanguageFeature|EString] ("," features+=[LanguageFeature|EString])* ")";
		@Override public ParserRule getRule() { return rule; }

		//"or" "(" features+=[LanguageFeature|EString] ("," features+=[LanguageFeature|EString])* ")"
		public Group getGroup() { return cGroup; }

		//"or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//features+=[LanguageFeature|EString]
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//[LanguageFeature|EString]
		public CrossReference getFeaturesLanguageFeatureCrossReference_2_0() { return cFeaturesLanguageFeatureCrossReference_2_0; }

		//EString
		public RuleCall getFeaturesLanguageFeatureEStringParserRuleCall_2_0_1() { return cFeaturesLanguageFeatureEStringParserRuleCall_2_0_1; }

		//("," features+=[LanguageFeature|EString])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//features+=[LanguageFeature|EString]
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//[LanguageFeature|EString]
		public CrossReference getFeaturesLanguageFeatureCrossReference_3_1_0() { return cFeaturesLanguageFeatureCrossReference_3_1_0; }

		//EString
		public RuleCall getFeaturesLanguageFeatureEStringParserRuleCall_3_1_0_1() { return cFeaturesLanguageFeatureEStringParserRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AlternativeGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeaturesLanguageFeatureCrossReference_2_0 = (CrossReference)cFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cFeaturesLanguageFeatureEStringParserRuleCall_2_0_1 = (RuleCall)cFeaturesLanguageFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFeaturesLanguageFeatureCrossReference_3_1_0 = (CrossReference)cFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cFeaturesLanguageFeatureEStringParserRuleCall_3_1_0_1 = (RuleCall)cFeaturesLanguageFeatureCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AlternativeGroup:
		//	"alternative" "(" features+=[LanguageFeature|EString] ("," features+=[LanguageFeature|EString])* ")";
		@Override public ParserRule getRule() { return rule; }

		//"alternative" "(" features+=[LanguageFeature|EString] ("," features+=[LanguageFeature|EString])* ")"
		public Group getGroup() { return cGroup; }

		//"alternative"
		public Keyword getAlternativeKeyword_0() { return cAlternativeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//features+=[LanguageFeature|EString]
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//[LanguageFeature|EString]
		public CrossReference getFeaturesLanguageFeatureCrossReference_2_0() { return cFeaturesLanguageFeatureCrossReference_2_0; }

		//EString
		public RuleCall getFeaturesLanguageFeatureEStringParserRuleCall_2_0_1() { return cFeaturesLanguageFeatureEStringParserRuleCall_2_0_1; }

		//("," features+=[LanguageFeature|EString])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//features+=[LanguageFeature|EString]
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//[LanguageFeature|EString]
		public CrossReference getFeaturesLanguageFeatureCrossReference_3_1_0() { return cFeaturesLanguageFeatureCrossReference_3_1_0; }

		//EString
		public RuleCall getFeaturesLanguageFeatureEStringParserRuleCall_3_1_0_1() { return cFeaturesLanguageFeatureEStringParserRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class VariabilityPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariabilityPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariationpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInvolvesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInvolvedFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cInvolvedFeaturesLanguageFeatureCrossReference_2_1_0 = (CrossReference)cInvolvedFeaturesAssignment_2_1.eContents().get(0);
		private final RuleCall cInvolvedFeaturesLanguageFeatureEStringParserRuleCall_2_1_0_1 = (RuleCall)cInvolvedFeaturesLanguageFeatureCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInvolvedFeaturesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cInvolvedFeaturesLanguageFeatureCrossReference_2_2_1_0 = (CrossReference)cInvolvedFeaturesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cInvolvedFeaturesLanguageFeatureEStringParserRuleCall_2_2_1_0_1 = (RuleCall)cInvolvedFeaturesLanguageFeatureCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariationsVariationParserRuleCall_4_0 = (RuleCall)cVariationsAssignment_4.eContents().get(0);
		private final Assignment cVariationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariationsVariationParserRuleCall_5_0 = (RuleCall)cVariationsAssignment_5.eContents().get(0);
		private final Keyword cDefaultKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDefaultAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDefaultVariationCrossReference_7_0 = (CrossReference)cDefaultAssignment_7.eContents().get(0);
		private final RuleCall cDefaultVariationIDTerminalRuleCall_7_0_1 = (RuleCall)cDefaultVariationCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//VariabilityPoint:
		//	"variationpoint" name=EString ("involves" involvedFeatures+=[LanguageFeature|EString] (","
		//	involvedFeatures+=[LanguageFeature|EString])*)? "{" variations+=Variation variations+=Variation* "default"
		//	default=[Variation] "}";
		@Override public ParserRule getRule() { return rule; }

		//"variationpoint" name=EString ("involves" involvedFeatures+=[LanguageFeature|EString] (","
		//involvedFeatures+=[LanguageFeature|EString])*)? "{" variations+=Variation variations+=Variation* "default"
		//default=[Variation] "}"
		public Group getGroup() { return cGroup; }

		//"variationpoint"
		public Keyword getVariationpointKeyword_0() { return cVariationpointKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("involves" involvedFeatures+=[LanguageFeature|EString] ("," involvedFeatures+=[LanguageFeature|EString])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"involves"
		public Keyword getInvolvesKeyword_2_0() { return cInvolvesKeyword_2_0; }

		//involvedFeatures+=[LanguageFeature|EString]
		public Assignment getInvolvedFeaturesAssignment_2_1() { return cInvolvedFeaturesAssignment_2_1; }

		//[LanguageFeature|EString]
		public CrossReference getInvolvedFeaturesLanguageFeatureCrossReference_2_1_0() { return cInvolvedFeaturesLanguageFeatureCrossReference_2_1_0; }

		//EString
		public RuleCall getInvolvedFeaturesLanguageFeatureEStringParserRuleCall_2_1_0_1() { return cInvolvedFeaturesLanguageFeatureEStringParserRuleCall_2_1_0_1; }

		//("," involvedFeatures+=[LanguageFeature|EString])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//involvedFeatures+=[LanguageFeature|EString]
		public Assignment getInvolvedFeaturesAssignment_2_2_1() { return cInvolvedFeaturesAssignment_2_2_1; }

		//[LanguageFeature|EString]
		public CrossReference getInvolvedFeaturesLanguageFeatureCrossReference_2_2_1_0() { return cInvolvedFeaturesLanguageFeatureCrossReference_2_2_1_0; }

		//EString
		public RuleCall getInvolvedFeaturesLanguageFeatureEStringParserRuleCall_2_2_1_0_1() { return cInvolvedFeaturesLanguageFeatureEStringParserRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//variations+=Variation
		public Assignment getVariationsAssignment_4() { return cVariationsAssignment_4; }

		//Variation
		public RuleCall getVariationsVariationParserRuleCall_4_0() { return cVariationsVariationParserRuleCall_4_0; }

		//variations+=Variation*
		public Assignment getVariationsAssignment_5() { return cVariationsAssignment_5; }

		//Variation
		public RuleCall getVariationsVariationParserRuleCall_5_0() { return cVariationsVariationParserRuleCall_5_0; }

		//"default"
		public Keyword getDefaultKeyword_6() { return cDefaultKeyword_6; }

		//default=[Variation]
		public Assignment getDefaultAssignment_7() { return cDefaultAssignment_7; }

		//[Variation]
		public CrossReference getDefaultVariationCrossReference_7_0() { return cDefaultVariationCrossReference_7_0; }

		//ID
		public RuleCall getDefaultVariationIDTerminalRuleCall_7_0_1() { return cDefaultVariationIDTerminalRuleCall_7_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class VariationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLanguagemoduleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cModuleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cModuleEStringParserRuleCall_3_1_0 = (RuleCall)cModuleAssignment_3_1.eContents().get(0);
		
		//Variation:
		//	{Variation} "variation" name=EString ("languagemodule" module=EString)?;
		@Override public ParserRule getRule() { return rule; }

		//{Variation} "variation" name=EString ("languagemodule" module=EString)?
		public Group getGroup() { return cGroup; }

		//{Variation}
		public Action getVariationAction_0() { return cVariationAction_0; }

		//"variation"
		public Keyword getVariationKeyword_1() { return cVariationKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("languagemodule" module=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"languagemodule"
		public Keyword getLanguagemoduleKeyword_3_0() { return cLanguagemoduleKeyword_3_0; }

		//module=EString
		public Assignment getModuleAssignment_3_1() { return cModuleAssignment_3_1; }

		//EString
		public RuleCall getModuleEStringParserRuleCall_3_1_0() { return cModuleEStringParserRuleCall_3_1_0; }
	}
	
	
	private final LanguageProductLineElements pLanguageProductLine;
	private final RelationElements pRelation;
	private final EStringElements pEString;
	private final ProductLineVariabilityElements pProductLineVariability;
	private final LanguageVariabilityElements pLanguageVariability;
	private final LanguageFeatureElements pLanguageFeature;
	private final EBooleanElements pEBoolean;
	private final MandatoryChildElements pMandatoryChild;
	private final OptionalChildElements pOptionalChild;
	private final OrGroupChildElements pOrGroupChild;
	private final AlternativeGroupElements pAlternativeGroup;
	private final VariabilityPointElements pVariabilityPoint;
	private final VariationElements pVariation;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MutivarGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLanguageProductLine = new LanguageProductLineElements();
		this.pRelation = new RelationElements();
		this.pEString = new EStringElements();
		this.pProductLineVariability = new ProductLineVariabilityElements();
		this.pLanguageVariability = new LanguageVariabilityElements();
		this.pLanguageFeature = new LanguageFeatureElements();
		this.pEBoolean = new EBooleanElements();
		this.pMandatoryChild = new MandatoryChildElements();
		this.pOptionalChild = new OptionalChildElements();
		this.pOrGroupChild = new OrGroupChildElements();
		this.pAlternativeGroup = new AlternativeGroupElements();
		this.pVariabilityPoint = new VariabilityPointElements();
		this.pVariation = new VariationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.puzzle.Mutivar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LanguageProductLine:
	//	{LanguageProductLine} ("import" implementationFile=EString)? ("languagefeatures"
	//	productLineVariability=ProductLineVariability)? ("orthogonalvariability" languageVariability=LanguageVariability)?;
	public LanguageProductLineElements getLanguageProductLineAccess() {
		return pLanguageProductLine;
	}
	
	public ParserRule getLanguageProductLineRule() {
		return getLanguageProductLineAccess().getRule();
	}

	//Relation:
	//	MandatoryChild | OptionalChild | OrGroupChild | AlternativeGroup;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ProductLineVariability:
	//	"{" features+=LanguageFeature features+=LanguageFeature* "root" rootFeature=[LanguageFeature|EString] "}";
	public ProductLineVariabilityElements getProductLineVariabilityAccess() {
		return pProductLineVariability;
	}
	
	public ParserRule getProductLineVariabilityRule() {
		return getProductLineVariabilityAccess().getRule();
	}

	//LanguageVariability:
	//	{LanguageVariability} "{" (variabilityPoints+=VariabilityPoint variabilityPoints+=VariabilityPoint*)? "}";
	public LanguageVariabilityElements getLanguageVariabilityAccess() {
		return pLanguageVariability;
	}
	
	public ParserRule getLanguageVariabilityRule() {
		return getLanguageVariabilityAccess().getRule();
	}

	//LanguageFeature:
	//	{LanguageFeature} abstract?="abstract"? "languagefeature" name=EString ("requires" depends+=[LanguageFeature|EString]
	//	("," depends+=[LanguageFeature|EString])*)? ("excludes" excludes+=[LanguageFeature|EString] (","
	//	excludes+=[LanguageFeature|EString])*)? "{" ("languagemodule" module=EString)? ("children" "{" children+=Relation
	//	children+=Relation* "}")? "}";
	public LanguageFeatureElements getLanguageFeatureAccess() {
		return pLanguageFeature;
	}
	
	public ParserRule getLanguageFeatureRule() {
		return getLanguageFeatureAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//MandatoryChild:
	//	"mandatory" feature=[LanguageFeature|EString];
	public MandatoryChildElements getMandatoryChildAccess() {
		return pMandatoryChild;
	}
	
	public ParserRule getMandatoryChildRule() {
		return getMandatoryChildAccess().getRule();
	}

	//OptionalChild:
	//	"optional" feature=[LanguageFeature|EString];
	public OptionalChildElements getOptionalChildAccess() {
		return pOptionalChild;
	}
	
	public ParserRule getOptionalChildRule() {
		return getOptionalChildAccess().getRule();
	}

	//OrGroupChild:
	//	"or" "(" features+=[LanguageFeature|EString] ("," features+=[LanguageFeature|EString])* ")";
	public OrGroupChildElements getOrGroupChildAccess() {
		return pOrGroupChild;
	}
	
	public ParserRule getOrGroupChildRule() {
		return getOrGroupChildAccess().getRule();
	}

	//AlternativeGroup:
	//	"alternative" "(" features+=[LanguageFeature|EString] ("," features+=[LanguageFeature|EString])* ")";
	public AlternativeGroupElements getAlternativeGroupAccess() {
		return pAlternativeGroup;
	}
	
	public ParserRule getAlternativeGroupRule() {
		return getAlternativeGroupAccess().getRule();
	}

	//VariabilityPoint:
	//	"variationpoint" name=EString ("involves" involvedFeatures+=[LanguageFeature|EString] (","
	//	involvedFeatures+=[LanguageFeature|EString])*)? "{" variations+=Variation variations+=Variation* "default"
	//	default=[Variation] "}";
	public VariabilityPointElements getVariabilityPointAccess() {
		return pVariabilityPoint;
	}
	
	public ParserRule getVariabilityPointRule() {
		return getVariabilityPointAccess().getRule();
	}

	//Variation:
	//	{Variation} "variation" name=EString ("languagemodule" module=EString)?;
	public VariationElements getVariationAccess() {
		return pVariation;
	}
	
	public ParserRule getVariationRule() {
		return getVariationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
