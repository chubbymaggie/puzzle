// automatically generated by Xtext
grammar fr.inria.diverse.puzzle.Mutivar with org.eclipse.xtext.common.Terminals

import "http://fr.inria.diverse.puzzle.multivar.metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LanguageProductLine returns LanguageProductLine:
	{LanguageProductLine}
		('import' implementationFile=EString)?
		('languagefeatures' productLineVariability=ProductLineVariability)?
		('orthogonalvariability' languageVariability=LanguageVariability)?
	;


Relation returns Relation:
	MandatoryChild | OptionalChild | OrGroupChild | AlternativeGroup;


EString returns ecore::EString:
	STRING | ID;

ProductLineVariability returns ProductLineVariability:
	'{'
		features+=LanguageFeature ( features+=LanguageFeature)*
		'root' rootFeature=[LanguageFeature|EString]
	'}';

LanguageVariability returns LanguageVariability:
	{LanguageVariability}
	'{'
		(variabilityPoints+=VariabilityPoint ( variabilityPoints+=VariabilityPoint)* )?
	'}';

LanguageFeature returns LanguageFeature:
	{LanguageFeature}
	(abstract?='abstract')?
	'languagefeature'
	name=EString
	('requires' depends+=[LanguageFeature|EString] ( "," depends+=[LanguageFeature|EString])* )?
	('excludes' excludes+=[LanguageFeature|EString] ( "," excludes+=[LanguageFeature|EString])* )?
	'{'
		('languagemodule' module=EString)?
		('children' '{' children+=Relation ( children+=Relation)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MandatoryChild returns MandatoryChild:
	'mandatory' feature=[LanguageFeature|EString];

OptionalChild returns OptionalChild:
	'optional' feature=[LanguageFeature|EString];

OrGroupChild returns OrGroupChild:
	'or' '(' features+=[LanguageFeature|EString] ( "," features+=[LanguageFeature|EString])* ')';

AlternativeGroup returns AlternativeGroup:
	'alternative' '(' features+=[LanguageFeature|EString] ( "," features+=[LanguageFeature|EString])* ')';

VariabilityPoint returns VariabilityPoint:
	'variationpoint'
	name=EString
	('involves' involvedFeatures+=[LanguageFeature|EString] ( "," involvedFeatures+=[LanguageFeature|EString])* )?
	'{'
		variations+=Variation ( variations+=Variation )* 
	'}';

Variation returns Variation:
	{Variation}
	(default?='default')?
	'variation'
	name=EString
		('languagemodule' module=EString)? ;
