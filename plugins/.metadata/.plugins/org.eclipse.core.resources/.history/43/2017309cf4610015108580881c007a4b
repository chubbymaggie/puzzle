package fr.inria.diverse.puzzle.vmsynthesis.tests;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import vm.PFeatureModel;
import fr.inria.diverse.k3.sle.common.graphs.DependencyGraph;
import fr.inria.diverse.puzzle.instancesgenerator.impl.GraphGenerator;
import fr.inria.diverse.puzzle.instancesgenerator.impl.PCMGenerator;
import fr.inria.diverse.puzzle.vmsynthesis.impl.PCMQueryServices;
import fr.inria.diverse.puzzle.vmsynthesis.impl.VmSynthesis;

public class RandomTest {

	// -------------------------------------------------
	// Attributes
	// -------------------------------------------------
	
	private VmSynthesis synthesis;
	
	// -------------------------------------------------
	// Loading scenarios
	// -------------------------------------------------
	
	@Before
	public void loadScenarios() throws Exception{
		synthesis = VmSynthesis.getInstance();
	}
	
	// -------------------------------------------------
	// Test Cases
	// -------------------------------------------------
	
	public double executeTest(int numFeatures, int numProducts) throws Exception {
		DependencyGraph randomAciclic = GraphGenerator.generateGraph(numFeatures, 880608);
		System.out.println("open fm: " + randomAciclic.toString());
		System.out.println("there is loop: " + randomAciclic.thereIsLoop());
		
		PFeatureModel openFM = VmSynthesis.getInstance().synthesizeOpenFeatureModel(randomAciclic);
		System.out.println(openFM.getRootFeature().getChildren().size());
		
		System.out.println("openFM");
		TestServices.printFM(openFM);
		
		String PCM = PCMGenerator.generatePCMs(randomAciclic, numProducts, 880608, 2);
		System.out.println("ya la calcule");
		PFeatureModel closedFM = synthesis.cloneFeatureModel(openFM);
		PCMQueryServices.getInstance().loadPCM(PCM);
		System.out.println("Cloned OpenFM");
		TestServices.printAllValidProducts(closedFM, PCM);
		
		synthesis.identifyMandatoryFeatures(closedFM);
		TestServices.printFM(closedFM);
		System.out.println("IdentifyMandatoryFeatures OpenFM");
		TestServices.printAllValidProducts(closedFM, PCM);
		
		synthesis.identifyXORs(closedFM);
		TestServices.printFM(closedFM);
		System.out.println("IdentifyXORs OpenFM");
		TestServices.printAllValidProducts(closedFM, PCM);
		
		synthesis.identifyORs(closedFM);
		TestServices.printFM(closedFM);
		System.out.println("IdentifyORs OpenFM");
		TestServices.printAllValidProducts(closedFM, PCM);
		
		synthesis.addAdditionalImpliesConstraints(closedFM);
		TestServices.printFM(closedFM);
		System.out.println("AddAdditionalImpliesConstraints OpenFM");
		TestServices.printAllValidProducts(closedFM, PCM);
		
		synthesis.addAdditionalExcludesConstraints(closedFM);
		TestServices.printFM(closedFM);
		System.out.println("AddAdditionalExcludesConstraints OpenFM");
		return TestServices.printAllValidProducts(closedFM, PCM);
	}
	
	@Test
	public void testRandom() throws Exception{
		int[] dataFeatures = {5, 8, 10, 15, 20};
		int[] dataNumProducts = {2, 4, 6, 7, 8};
		String resultMessage = "";
		for (int i = 0; i < dataFeatures.length; i++) {
			for (int j = 0; j < dataNumProducts.length; j++) {
				double result = this.executeTest(dataFeatures[i], dataNumProducts[j]);
				
				if(result != dataNumProducts[j]){
					resultMessage += "FAIL: " + "No. Features: " + dataFeatures[i] + 
							"; No. Products: " + dataNumProducts[j] + "; Result: " + result + "\n";
				}else{
					resultMessage += "SUCCESS: " + "No. Features: " + dataFeatures[i] + 
							"; No. Products: " + dataNumProducts[j] + " Result: " + result + "\n";
				}
			}
		}
		
		System.out.println(resultMessage);
	}
}