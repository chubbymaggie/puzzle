package fr.inria.diverse.puzzle.metrics.actions;

import java.util.ArrayList;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.emf.ecore.EPackage;

import fr.inria.diverse.k3.sle.common.utils.ModelUtils;
import fr.inria.diverse.puzzle.metrics.evaluators.SyntacticProductRelatedReusability;
import fr.inria.diverse.puzzle.metrics.evaluators.SizeOfSyntacticCommonality;
import fr.inria.diverse.puzzle.metrics.evaluators.SyntacticIndividualizationRatio;
import fr.inria.diverse.puzzle.metrics.evaluators.TotalAmountOfConcepts;

public class ComputeMetricsActionImpl {

	private static ComputeMetricsActionImpl instance;
	
	private ComputeMetricsActionImpl(){
		
	}
	
	public static ComputeMetricsActionImpl getInstance(){
		if(instance == null)
			instance = new ComputeMetricsActionImpl();
		return instance;
	}
	
	public String computeMetrics(ArrayList<IResource> selectedResources){
		ArrayList<EPackage> ePackages = new ArrayList<EPackage>();
		for (IResource iResource : selectedResources) {
			IFile currentFile = (IFile) iResource;
			EPackage currentMetamodel = ModelUtils.loadEcoreFile(currentFile.getLocation().toString());
			ePackages.add(currentMetamodel);
		}
		
		String metrics = "Size of syntactic commonality: " + SizeOfSyntacticCommonality.evaluateMetric(ePackages);
		
		metrics += "\n\n" + "Total amount of concepts: " + TotalAmountOfConcepts.evaluateMetric(ePackages);
		metrics += "\n\n" + "Product-related reusability: " + SyntacticProductRelatedReusability.evaluate(ePackages);
		metrics += "\n\n" + "Individualization ratio: " + SyntacticIndividualizationRatio.evaluate(ePackages);
		
		return metrics;
	}
}
