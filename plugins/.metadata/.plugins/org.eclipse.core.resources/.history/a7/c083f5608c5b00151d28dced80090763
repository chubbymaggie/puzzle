package fr.inria.diverse.melange.ui.builder

import fr.inria.diverse.k3.sle.common.commands.ConceptComparison
import fr.inria.diverse.k3.sle.common.commands.MethodComparison
import fr.inria.diverse.k3.sle.common.commands.FeaturesModelInference
import fr.inria.diverse.k3.sle.common.commands.GraphPartition
import fr.inria.diverse.k3.sle.common.comparisonOperators.DeepConceptComparison
import fr.inria.diverse.k3.sle.common.comparisonOperators.SignatureAndSourceMethodComparison
import fr.inria.diverse.k3.sle.common.graphsOperators.MinimumAcyclicPartition
import fr.inria.diverse.puzzle.variabilityinferer.inferers.PuzzleInferrer
import fr.inria.diverse.k3.sle.common.vos.SynthesisProperties

/**
 * Abstract builder. Responsible for 
 */
class AbstractBuilder {
	
	def protected SynthesisProperties getSynthesisProperties(){
		var ConceptComparison conceptComparisonOperator = new DeepConceptComparison();
		var MethodComparison methodComparisonOperator = SignatureAndSourceMethodComparison.getInstance();
		var FeaturesModelInference variabilityInferer = new PuzzleInferrer();
		var GraphPartition graphPartition = new MinimumAcyclicPartition();
		var SynthesisProperties properties = new SynthesisProperties(conceptComparisonOperator, methodComparisonOperator, variabilityInferer, graphPartition);
		return properties;
	}
}