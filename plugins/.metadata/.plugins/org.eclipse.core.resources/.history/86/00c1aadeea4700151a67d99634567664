package fr.inria.diverse.melange.ui.menu;

import com.google.inject.Inject;
import fr.inria.diverse.melange.ui.builder.MelangeBuilder;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.xtext.resource.DerivedStateAwareResource;
import org.eclipse.xtext.ui.resource.XtextResourceSetProvider;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class GenerateAdapters extends AbstractHandler {
  @Inject
  private MelangeBuilder builder;
  
  @Inject
  private XtextResourceSetProvider rsProvider;
  
  @Override
  public Object execute(final ExecutionEvent event) throws ExecutionException {
    new Job("Melange: Generating adapters code") {
      @Override
      public IStatus run(final IProgressMonitor monitor) {
        try {
          try {
            final ISelection sel = HandlerUtil.getActiveMenuSelection(event);
            final IStructuredSelection selection = ((IStructuredSelection) sel);
            Object _firstElement = selection.getFirstElement();
            final IResource resource = ((IResource) _firstElement);
            final IProject project = resource.getProject();
            final ResourceSet rs = GenerateAdapters.this.rsProvider.get(project);
            IPath _fullPath = resource.getFullPath();
            String _string = _fullPath.toString();
            URI _createPlatformResourceURI = URI.createPlatformResourceURI(_string, true);
            Resource _resource = rs.getResource(_createPlatformResourceURI, true);
            final DerivedStateAwareResource res = ((DerivedStateAwareResource) _resource);
            final IFolder srcGenFolder = project.getFolder("src-gen/");
            boolean _exists = srcGenFolder.exists();
            if (_exists) {
              IResource[] _members = srcGenFolder.members();
              final Consumer<IResource> _function = (IResource it) -> {
                try {
                  it.delete(true, monitor);
                } catch (Throwable _e) {
                  throw Exceptions.sneakyThrow(_e);
                }
              };
              ((List<IResource>)Conversions.doWrapArray(_members)).forEach(_function);
            }
            GenerateAdapters.this.builder.generateAdapters(res, project, monitor);
          } catch (final Throwable _t) {
            if (_t instanceof OperationCanceledException) {
              final OperationCanceledException e = (OperationCanceledException)_t;
              return Status.CANCEL_STATUS;
            } else {
              throw Exceptions.sneakyThrow(_t);
            }
          } finally {
            monitor.done();
          }
          return Status.OK_STATUS;
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      }
    }.schedule();
    return null;
  }
}
