package fr.inria.diverse.puzzle.derivator.impl;

import java.util.ArrayList;

import org.eclipse.core.resources.IProject;

import vm.LanguageFeature;
import vm.LanguageFeatureModel;
import PuzzleADL.LanguageArchitecture;
import PuzzleADL.LanguageModule;

/**
 * Implementation of the command DerivateLangaugeFromConfiguration
 * 
 * @author David Mendez-Acuna
 *
 */

public class PuzzleDerivator implements IDerivator{

	// --------------------------------------------------
	// Methods
	// --------------------------------------------------
	
	@Override
	public void derivateLangaugeFromConfiguration(IProject derivationProject,
			LanguageArchitecture languageArchitectureModel,
			LanguageFeatureModel configuredFeatureModel) {
		
		String melangeFileContents = "package family";
		ArrayList<LanguageFeature> selectedFeatures = new ArrayList<LanguageFeature>();
		this.collectSelectedFeatures(configuredFeatureModel, selectedFeatures);
		
	}
	
	/**
	 * Creates the definition in melange for a language module given in the parameter.
	 * @param module Language module under study. 
	 * @return
	 */
	private String createLanguageModuleDeclaration(LanguageModule module){
		String answer = "language " + module.getName();
		
		if(module.getProvidedInterface() != null)
			answer += " implements " + module.getName() + "Prov";
		
		if(module.getRequiredInterface() != null)
			answer += " requires " + module.getName() + "Req";
		
		answer += "{\n";
		answer += "     syntax platform:/resource/" + module.getAbstractSyntax().getEcorePath() + "\n";
		
		if(module.getSemanticsImplementation() != null){
			answer += "\n";
			for(String aspect : module.getSemanticsImplementation().getAspectsIdentifiers()){
				answer += "     with " + aspect + "\n";
			}
		}
		
		answer += "\n     exacttype " + module.getName() + "MT";
		answer += "}\n";
		
		return answer;
	}

}
