package fr.inria.diverse.ksynthesis.ksynthesis.facade;

import java.io.File;

import fr.familiar.interpreter.FMLShell;
import fr.familiar.variable.FeatureModelVariable;

/**
 * Facade to the KSynthesis variability synthesizer. 
 * 
 * @author Guillaume Becan
 * @author David Mendez-Acuna
 *
 */
public class KSynthesisSynthesizer {

	// ----------------------------------------------------------
	// Attributes
	// ----------------------------------------------------------
	
	private static KSynthesisSynthesizer instance;
	
	// ----------------------------------------------------------
	// Constructor and singleton
	// ----------------------------------------------------------
	
	private KSynthesisSynthesizer(){}
	
	public static KSynthesisSynthesizer getInstance(){
		if(instance == null)
			instance = new KSynthesisSynthesizer();
		return instance;
	}
	
	// ----------------------------------------------------------
	// Methods
	// ----------------------------------------------------------

	/**
	 * Synthesizes a feature model from a PCM. 
	 * @param inputFile The location of the file containing the PCM in a comma separated file
	 * @param outputFile The location of the file in which the feature model should be saved. 
	 */
	public void synthesizeFeatureModelFromPCM(String inputFile, String outputFile){
		FeatureModelVariable fm = loadPCM(inputFile);
		System.out.println(fm);
	}
	
	public FeatureModelVariable loadPCM(String inputFile){
		FMLShell _shell = FMLShell.instantiateWithEclipse(null);
		File file = new File(inputFile);
		String fmIdentifier = file.getName();;
		FeatureModelVariable fm = null;

		fmIdentifier = fmIdentifier.substring(0, fmIdentifier.lastIndexOf("."));
		String command = fmIdentifier.replaceAll("-", "_") + " = FM(\"" + file.getPath() + "\")";
		try {
			fm = (FeatureModelVariable) _shell.parse(command);	
		} catch (Exception e) {
			fm = null;
		}
		return fm;
	}
}
