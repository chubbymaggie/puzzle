package fr.inria.diverse.melange.ui.labeling;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import fr.inria.diverse.melange.ast.LanguageExtensions;
import fr.inria.diverse.melange.metamodel.melange.Aspect;
import fr.inria.diverse.melange.metamodel.melange.Inheritance;
import fr.inria.diverse.melange.metamodel.melange.Language;
import fr.inria.diverse.melange.metamodel.melange.ModelType;
import fr.inria.diverse.melange.metamodel.melange.ModelTypingSpace;
import fr.inria.diverse.melange.metamodel.melange.Operator;
import fr.inria.diverse.melange.metamodel.melange.Subtyping;
import fr.inria.diverse.melange.metamodel.melange.Transformation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EParameter;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;

@SuppressWarnings("all")
public class MelangeLabelProvider extends XbaseLabelProvider {
  @Inject
  @Extension
  private LanguageExtensions _languageExtensions;
  
  @Inject
  public MelangeLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final ModelTypingSpace root) {
    return "melange.png";
  }
  
  public String image(final Language l) {
    return "metamodel.png";
  }
  
  public String image(final ModelType mt) {
    return "modeltype.png";
  }
  
  public String image(final Transformation t) {
    return "transformation.png";
  }
  
  public String text(final Aspect asp) {
    String _xifexpression = null;
    JvmTypeReference _aspectTypeRef = asp.getAspectTypeRef();
    JvmType _type = _aspectTypeRef.getType();
    if ((_type instanceof JvmDeclaredType)) {
      StringConcatenation _builder = new StringConcatenation();
      JvmTypeReference _aspectTypeRef_1 = asp.getAspectTypeRef();
      JvmType _type_1 = _aspectTypeRef_1.getType();
      String _simpleName = _type_1.getSimpleName();
      _builder.append(_simpleName, "");
      {
        EClass _aspectedClass = asp.getAspectedClass();
        boolean _tripleNotEquals = (_aspectedClass != null);
        if (_tripleNotEquals) {
          _builder.append(" @ ");
          EClass _aspectedClass_1 = asp.getAspectedClass();
          String _name = _aspectedClass_1.getName();
          _builder.append(_name, "");
        }
      }
      _xifexpression = _builder.toString();
    } else {
      _xifexpression = "Unbinded aspect";
    }
    return _xifexpression;
  }
  
  public String image(final Aspect asp) {
    String _xifexpression = null;
    EClass _aspectedClass = asp.getAspectedClass();
    boolean _tripleNotEquals = (_aspectedClass != null);
    if (_tripleNotEquals) {
      _xifexpression = "aspect.png";
    } else {
      _xifexpression = "aspect2.png";
    }
    return _xifexpression;
  }
  
  public String text(final ModelType mt) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = mt.getName();
    _builder.append(_name, "");
    {
      EList<Subtyping> _subtypingRelations = mt.getSubtypingRelations();
      boolean _hasElements = false;
      for(final Subtyping t : _subtypingRelations) {
        if (!_hasElements) {
          _hasElements = true;
          _builder.append(" ◁ ", "");
        } else {
          _builder.appendImmediate(", ", "");
        }
        ModelType _superType = t.getSuperType();
        String _name_1 = _superType.getName();
        _builder.append(_name_1, "");
      }
    }
    return _builder.toString();
  }
  
  public String text(final Language l) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = l.getName();
    _builder.append(_name, "");
    {
      EList<Operator> _operators = l.getOperators();
      Iterable<Inheritance> _filter = Iterables.<Inheritance>filter(_operators, Inheritance.class);
      final Function1<Inheritance, Language> _function = (Inheritance it) -> {
        return it.getSuperLanguage();
      };
      Iterable<Language> _map = IterableExtensions.<Inheritance, Language>map(_filter, _function);
      boolean _hasElements = false;
      for(final Language t : _map) {
        if (!_hasElements) {
          _hasElements = true;
          _builder.append("◀", "");
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _name_1 = t.getName();
        _builder.append(_name_1, "");
      }
    }
    {
      EList<ModelType> _implements = l.getImplements();
      boolean _hasElements_1 = false;
      for(final ModelType t_1 : _implements) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
          _builder.append(" ◁ ", "");
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _name_2 = t_1.getName();
        _builder.append(_name_2, "");
      }
    }
    return _builder.toString();
  }
  
  public String text(final EAttribute a) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = a.getName();
    _builder.append(_name, "");
    _builder.append(" : ");
    EClassifier _eType = a.getEType();
    String _name_1 = _eType.getName();
    _builder.append(_name_1, "");
    return _builder.toString();
  }
  
  public String text(final EReference r) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = r.getName();
    _builder.append(_name, "");
    _builder.append(" : ");
    EClassifier _eType = r.getEType();
    String _name_1 = _eType.getName();
    _builder.append(_name_1, "");
    return _builder.toString();
  }
  
  public String text(final EOperation o) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = o.getName();
    _builder.append(_name, "");
    _builder.append(" : ");
    EClassifier _eType = o.getEType();
    String _name_1 = _eType.getName();
    _builder.append(_name_1, "");
    return _builder.toString();
  }
  
  public String text(final EParameter p) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append(" : ");
    EClassifier _eType = p.getEType();
    String _name_1 = _eType.getName();
    _builder.append(_name_1, "");
    return _builder.toString();
  }
}
