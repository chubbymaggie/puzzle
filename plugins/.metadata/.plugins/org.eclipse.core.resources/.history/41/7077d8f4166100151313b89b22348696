package fr.inria.diverse.puzzle.instancesgenerator.impl;

import java.util.ArrayList;
import java.util.Random;

import fr.inria.diverse.k3.sle.common.graphs.DependencyArc;
import fr.inria.diverse.k3.sle.common.graphs.DependencyGraph;
import fr.inria.diverse.k3.sle.common.graphs.DependencyVertex;

/**
 * Random generator of PCMs for a given dependencies graph.
 * 
 * @author David Mendez-Acuna
 * 
 */
public class PCMGenerator {

	// -------------------------------------------------------
	// Methods
	// -------------------------------------------------------
	
	public static ArrayList<String> generatePCMs(DependencyGraph graph, int PCMsAmount, int productsAmount, long seed, int k){
		ArrayList<String> PCMs = new ArrayList<String>();
		Random generator = new Random(seed);
		int iterations = PCMsAmount;
		while(iterations > 0){
			String PCM = "\"Product\",";
			
			for (DependencyVertex vertex : graph.getVertex()) {
				PCM += "\"" + vertex.getIdentifier() + "\",";
			}
			
			int productsIterations = productsAmount;
			while(productsIterations > 0){
				
				ArrayList<DependencyVertex> vertexToInclude = new ArrayList<DependencyVertex>();
				PCM += "\"" + vertex.getIdentifier() + "\",";
				
				// Randomly choosing k vertex
				int graphSize = graph.getVertex().size();
				int iterationsK = k;
				while(iterationsK > 0){
					
					int currentVertexIndex = 0 + (int)(generator.nextDouble() * (graphSize - 1));
					DependencyVertex currentVertex = graph.getVertex().get(currentVertexIndex);
					addDependencies(currentVertex, vertexToInclude);
					iterationsK--;
				}
				
				for (DependencyVertex dependencyVertex : vertexToInclude) {
					PCM += "\"" + dependencyVertex.getIdentifier() + "\",";
				}
				
				PCM += "\n";
				productsIterations--;
			}
			
			
			PCMs.add(PCM);
			iterations--;
		}
		return PCMs;
	}

	/**
	 * Add the dependencies to the given vertex in the array in the parameter. 
	 * @param vertex
	 * @param array
	 */
	private static void addDependencies(DependencyVertex vertex,
			ArrayList<DependencyVertex> array) {
		
		if(!array.contains(vertex))
			array.add(vertex);
		
		for (DependencyArc arc : vertex.getOutgoingArcs()) {
			addDependencies(arc.getTo(), array);
		}
	}
}
