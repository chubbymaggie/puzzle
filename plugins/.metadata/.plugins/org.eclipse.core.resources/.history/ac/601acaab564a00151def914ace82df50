package fr.inria.diverse.k3.sle.common.comparisonOperators;

import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmOperation;

/**
 * Service for methods comparison by their signature
 * @author David Mendez-Acuna
 */
public class SignatureMethodComparison implements MethodComparison {

	@Override
	public boolean equal(JvmOperation left, JvmOperation right) {
		boolean identicalModifiers = compareModifiers(left, right);
		boolean identicalReturnType = compareReturnType(left, right);
		boolean identicalName = compareName(left, right);
		boolean identicalParameters = compareParameters(left, right);
		boolean identicalExceptions = compareExceptions(left, right);
		return identicalModifiers && identicalReturnType && identicalName && identicalParameters;
	}

	private boolean compareModifiers(JvmOperation left, JvmOperation right) {
		return left.getVisibility().getName().equals(right.getVisibility().getName());
	}

	private boolean compareReturnType(JvmOperation left, JvmOperation right) {
		return left.getReturnType().getSimpleName().equals(right.getReturnType().getSimpleName());
	}
	
	private boolean compareName(JvmOperation left, JvmOperation right) {
		return left.getSimpleName().equals(right.getSimpleName());
	}
	
	private boolean compareParameters(JvmOperation left, JvmOperation right) {
		if(left.getParameters().size() != right.getParameters().size())
			return false;
		
		int i = 0;
		for (JvmFormalParameter leftParam : left.getParameters()) {
			JvmFormalParameter rightParam = right.getParameters().get(i);
			if(!leftParam.getParameterType().getSimpleName().equals(rightParam.getParameterType().getSimpleName()))
				return false;
			i++;
		}
		return true;
	}
}