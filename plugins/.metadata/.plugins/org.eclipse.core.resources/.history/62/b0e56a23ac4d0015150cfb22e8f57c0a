package fr.inria.diverse.puzzle.metrics.specialCharts;

import java.util.ArrayList;

import org.eclipse.xtext.common.types.JvmFormalParameter;

import fr.inria.diverse.k3.sle.common.comparisonOperators.ConceptComparison;
import fr.inria.diverse.k3.sle.common.comparisonOperators.MethodComparison;
import fr.inria.diverse.k3.sle.common.tuples.SemanticNode;
import fr.inria.diverse.k3.sle.common.tuples.SemanticTree;
import fr.inria.diverse.k3.sle.common.tuples.TupleConceptMethodMember;
import fr.inria.diverse.k3.sle.common.tuples.TupleConceptMethodMembers;
import fr.inria.diverse.k3.sle.common.tuples.TupleConceptMethodsMembers;
import fr.inria.diverse.k3.sle.common.tuples.TupleMethodMembers;
import fr.inria.diverse.k3.sle.common.utils.FamiliesServices;
import fr.inria.diverse.melange.metamodel.melange.Language;

public class SemanticalVariabilityTree {

	public static String getVariablesDeclaration(ArrayList<Language> languages, ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator){
		String answer = "";
		ArrayList<TupleConceptMethodMember> conceptMethodMemberList = FamiliesServices.getInstance().getConceptMethodMemberMappingList(languages);
		ArrayList<TupleConceptMethodMembers> conceptMethodMemberGroupList = FamiliesServices.getInstance().getConceptMethodMemberGroupList(conceptMethodMemberList, conceptComparisonOperator, methodComparisonOperator);
		
		ArrayList<TupleConceptMethodsMembers> conceptsGroupMethodMemberGroupList = FamiliesServices.getInstance().getConceptMethodsMembersGroupTupleList(conceptMethodMemberGroupList, conceptComparisonOperator, methodComparisonOperator);
		SemanticTree semanticTree = buildSemanticTree(conceptsGroupMethodMemberGroupList);
		
		answer += "var treeData = [\n";
		answer += "    {";
		answer += "    \"name\": \"" + semanticTree.getRoot().getLabel() + "\",\n";
		answer += "    \"parent\": \"null\",\n";
		answer += "    \"children\": [\n";
		
		String treeString = buildTreeString(semanticTree.getRoot());
		
		boolean firstLevel0 = true;
		for (SemanticNode conceptNode : semanticTree.getRoot().getChilds()) {
			if(!firstLevel0) answer += ",\n";
			//FIXME
			String conceptName = conceptMethodMembersGroupVO.getConcept().getSimpleName().replace("Aspect", "");
			answer += "          {\n";
			answer += "          \"name\": \"" + conceptName + "\",\n";
			answer += "          \"parent\": \"Family\"";
			
			
			if(conceptMethodMembersGroupVO.getMethodsMembers().size() > 0){
				answer += ",\n";
				answer += "          \"children\": [\n";
				boolean firstLevel1 = true;
				for (TupleMethodMembers methodMembers : conceptMethodMembersGroupVO.getMethodsMembers()) {
					if(!firstLevel1) answer += ",\n";
					String operationSignature = methodMembers.getMethod().getReturnType().getSimpleName() + " " 
													+ methodMembers.getMethod().getSimpleName() + "(";
					for (JvmFormalParameter param : methodMembers.getMethod().getParameters()) {
						operationSignature += param.getParameterType().getSimpleName() + " ";
					}
					operationSignature += ") [from:";
					
					for (String member : methodMembers.getMembers()) {
						operationSignature += " " + member;
					}
					operationSignature += "]";
					
					answer += "               {\n";
					answer += "               \"name\": \"" + operationSignature + "\",\n";
					answer += "               \"parent\": \"" + conceptName + "\"\n";
					answer += "               }";
					firstLevel1 = false;
				}
				answer += "\n";
				answer += "              ]\n";
			}else{
				answer += "\n";
			}
			answer += "          }";
			firstLevel0 = false;
		}
		answer += "\n";
		answer += "     ]\n";
		answer += "    }\n";
		answer += "];\n";
		
		return answer;
	}
	
	private static SemanticTree buildSemanticTree(ArrayList<TupleConceptMethodsMembers> conceptsGroupMethodMemberGroupList){
		SemanticTree tree = new SemanticTree();
		SemanticNode root = new SemanticNode("Family", null);
		tree.setRoot(root);
		
		for (TupleConceptMethodsMembers tupleConceptMethodsMembers : conceptsGroupMethodMemberGroupList) {
			SemanticNode conceptNode = new SemanticNode(tupleConceptMethodsMembers.getConcept().getSimpleName(), root);
			
			for (TupleMethodMembers methodMembers : tupleConceptMethodsMembers.getMethodsMembers()) {
				if(methodMembers.getMembers().size() == 1){
					SemanticNode methodNode = new SemanticNode(methodMembers.getMethod().getSimpleName().replace("Aspect", ""), conceptNode);
					conceptNode.getChilds().add(methodNode);
				}else{
					String nodeName = methodMembers.getMethod().getSimpleName() + " [from:";
					
					boolean first = true;
					for (String member : methodMembers.getMembers()) {
						if(!first) nodeName += " ,";
						nodeName += member;
						first = false;
					}
					nodeName += "]";
					SemanticNode methodNode = new SemanticNode(nodeName, conceptNode);
					conceptNode.getChilds().add(methodNode);
				}
			}
			root.getChilds().add(conceptNode);
		}
		return tree;
	}
	
	private static String buildTreeString(SemanticNode root, boolean first) {
		String answer = "";
		answer += "          {\n";
		answer += "          \"name\": \"" + root.getLabel() + "\",\n";
		answer += "          \"parent\": \"" + root.getParent() != null ? root.getParent().getLabel() : "null" + "\"";
		
		boolean first = true;
		if(root.getChilds().size() != 0){
			answer += ",\n";
			answer += "          \"children\": [\n";
			
			answer += "              ]\n";
		}
		
		answer += "    }\n";
		
		return answer;
	}
}
