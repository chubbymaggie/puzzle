package fr.inria.diverse.puzzle.extractor.impl;

import java.util.ArrayList;

import org.eclipse.core.resources.IProject;

import PuzzleADL.AbstractSyntaxImplementation;
import PuzzleADL.LanguageArchitecture;
import PuzzleADL.LanguageModule;
import PuzzleADL.ProvidedInterface;
import PuzzleADL.PuzzleADLFactory;
import PuzzleADL.RequiredInterface;
import PuzzleADL.impl.RequiredInterfaceImpl;
import fr.inria.diverse.graph.Arc;
import fr.inria.diverse.k3.sle.common.graphs.DependencyGraph;
import fr.inria.diverse.k3.sle.common.graphs.EcoreArc;
import fr.inria.diverse.k3.sle.common.graphs.EcoreGraph;
import fr.inria.diverse.k3.sle.common.graphs.EcoreGroup;
import fr.inria.diverse.k3.sle.common.vos.SynthesisProperties;
import fr.inria.diverse.melange.metamodel.melange.Language;
import fr.inria.diverse.puzzle.breaker.command.BreakerImpl;
import fr.inria.diverse.puzzle.metrics.managers.ProductLinesMetricManager;

public class ExtractorImpl {

	// --------------------------------------------------
	// Attributes
	// --------------------------------------------------
	
	private static ExtractorImpl instance;
	
	// --------------------------------------------------
	// Constructor and singleton
	// --------------------------------------------------
	
	private ExtractorImpl(){
		
	}
	
	public static ExtractorImpl getInstance(){
		if(instance == null)
			instance = new ExtractorImpl();
		return instance;
	}
	
	// --------------------------------------------------
	// Methods
	// --------------------------------------------------
	
	public void extractReusableModules(SynthesisProperties properties, ArrayList<Language> languages, IProject project) throws Exception{
		
		// Step 1.1: Break-down the family
		EcoreGraph modularizationGraph = BreakerImpl.getInstance().breakDownFamily(languages, properties, project);
		
		// Step 1.2: Generate reports with modularization metrics and dependencies graph visualizers
		ProductLinesMetricManager metricsManager = new ProductLinesMetricManager(project);
		metricsManager.createProductLineCouplingReport(languages);
		metricsManager.createProductLineCouplingReportData(languages, properties.getConceptComparisonOperator(), 
				properties.getMethodComparisonOperator(), modularizationGraph);
		metricsManager.createProductLineIntraconnectivityReport(languages);
		metricsManager.createProductLineIntraConnectivityReportData(languages, properties.getConceptComparisonOperator(), 
				properties.getMethodComparisonOperator(), modularizationGraph);
		metricsManager.createProductLineInterconnectivityReport(languages);
		metricsManager.createProductLineInterConnectivityReportData(languages, properties.getConceptComparisonOperator(), 
				properties.getMethodComparisonOperator(), modularizationGraph);
		
		// Step 1.3: Compute the dependencies graph.
		DependencyGraph dependenciesGraph = new DependencyGraph(modularizationGraph);
		metricsManager.createDependenciesGraph();
		metricsManager.createDependenciesGraphData(languages, properties.getConceptComparisonOperator(), 
				dependenciesGraph);
		
		// Step 1.4: Validates that the dependencies graph is acyclic.
		if(dependenciesGraph.thereIsLoop())
			throw new Exception("The obtained dependencies graph is not acyclic! Check your graph partitioning algorithm.");
	
		// Step 1.5: Computes the ADL script to explicitly serialize the architecture model
		LanguageArchitecture languageArchitectureModel = this.createLanguageArchitectureModel("Architecture", modularizationGraph, dependenciesGraph);
	}

	/**
	 * Produces a language architecture model according to the information in the
	 * modularization graph given in the parameter. 
	 * 
	 * @param modularizationGraph
	 * @return
	 */
	private LanguageArchitecture createLanguageArchitectureModel(String languageName,
			EcoreGraph modularizationGraph, DependencyGraph dependenciesGraph) {
		LanguageArchitecture languageArchitectureModel = PuzzleADLFactory.eINSTANCE.createLanguageArchitecture();
		
		// Creating the one language module for each ecore constructs group.
		for (EcoreGroup group : modularizationGraph.getGroups()) {
			LanguageModule languageModule = PuzzleADLFactory.eINSTANCE.createLanguageModule();
			languageModule.setName(group.getName());
			
			AbstractSyntaxImplementation as = PuzzleADLFactory.eINSTANCE.createAbstractSyntaxImplementation();
			as.setEcorePath(group.getMetamodelPath());
			languageModule.setAbstractSyntax(as);
			
			if(group.getRequiredInterfacePath() != null){
				RequiredInterface requiredInterface = PuzzleADLFactory.eINSTANCE.createRequiredInterface();
				requiredInterface.setName(group.getName() + "Req");
				requiredInterface.setEcorePath(group.getRequiredInterfacePath());
				languageModule.setRequiredInterface(requiredInterface);
			}
			
			if(group.getProvidedInterfacePath() != null){
				ProvidedInterface providedInterface = PuzzleADLFactory.eINSTANCE.createProvidedInterface();
				providedInterface.setName(group.getName() + "Prov");
				providedInterface.setEcorePath(group.getProvidedInterfacePath());
				languageModule.setProvidedInterface(providedInterface);
			}
			
			languageArchitectureModel.getLanguageModules().add(languageModule);
		}
		
		// Creating dependencies between modules i.e., binding between interfaces according to the arcs in the 
		// dependencies graph.
		for (Arc arc : dependenciesGraph.getArcs()) {
			EcoreGroup gromGroup = modularizationGraph.getEcoreGroupByDependencyNode(arc.getFrom());
		}
		
		
		return languageArchitectureModel;
	}
}
