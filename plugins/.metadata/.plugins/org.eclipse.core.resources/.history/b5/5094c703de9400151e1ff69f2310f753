// automatically generated by Xtext
grammar fr.inria.diverse.puzzle.Mutivar with org.eclipse.xtext.common.Terminals

import "http://fr.inria.diverse.puzzle.multivar.metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LanguageProductLine returns LanguageProductLine:
	{LanguageProductLine}
		('import' implementationFile=EString)?
		('features' productLineVariability=ProductLineVariability)?
		('variationpoints' languageVariability=LanguageVariability)?
	;





Relation returns Relation:
	MandatoryChild | OptionalChild | OrGroupChild | AlternativeGroup;


EString returns ecore::EString:
	STRING | ID;

ProductLineVariability returns ProductLineVariability:
	'{'
		features+=LanguageFeature ( features+=LanguageFeature)*
		'root' rootFeature=[LanguageFeature|EString]
	'}';

LanguageVariability returns LanguageVariability:
	{LanguageVariability}
	'{'
		(variabilityPoints+=VariabilityPoint ( variabilityPoints+=VariabilityPoint)* )?
	'}';

LanguageFeature returns LanguageFeature:
	{LanguageFeature}
	(abstract?='abstract')?
	'LanguageFeature'
	name=EString
	'{'
		('module' module=EString)?
		('depends' '(' depends+=[LanguageFeature|EString] ( "," depends+=[LanguageFeature|EString])* ')' )?
		('excludes' '(' excludes+=[LanguageFeature|EString] ( "," excludes+=[LanguageFeature|EString])* ')' )?
		('children' '{' children+=Relation ( "," children+=Relation)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MandatoryChild returns MandatoryChild:
	'MandatoryChild'
	'{'
		'feature' feature=[LanguageFeature|EString]
	'}';

OptionalChild returns OptionalChild:
	'OptionalChild'
	'{'
		'feature' feature=[LanguageFeature|EString]
	'}';

OrGroupChild returns OrGroupChild:
	'OrGroupChild'
	'{'
		'features' '(' features+=[LanguageFeature|EString] ( "," features+=[LanguageFeature|EString])* ')' 
	'}';

AlternativeGroup returns AlternativeGroup:
	'AlternativeGroup'
	'{'
		'features' '(' features+=[LanguageFeature|EString] ( "," features+=[LanguageFeature|EString])* ')' 
	'}';

VariabilityPoint returns VariabilityPoint:
	'VariabilityPoint'
	name=EString
	'{'
		('involvedFeatures' '(' involvedFeatures+=[LanguageFeature|EString] ( "," involvedFeatures+=[LanguageFeature|EString])* ')' )?
		'variations' '{' variations+=Variation ( "," variations+=Variation)* '}' 
	'}';

Variation returns Variation:
	{Variation}
	'Variation'
	name=EString
	'{'
		('module' module=EString)?
	'}';
