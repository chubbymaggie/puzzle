package fr.inria.diverse.melange.ui.hyperlink;

import com.google.inject.Provider;
import fr.inria.diverse.melange.metamodel.melange.Import;
import fr.inria.diverse.melange.metamodel.melange.Language;
import fr.inria.diverse.melange.metamodel.melange.MelangePackage;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.URIConverter;
import org.eclipse.jface.text.Region;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.EObjectAtOffsetHelper;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkAcceptor;
import org.eclipse.xtext.ui.editor.hyperlinking.XtextHyperlink;
import org.eclipse.xtext.util.ITextRegion;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.ui.navigation.XbaseHyperLinkHelper;

@SuppressWarnings("all")
public class MelangeHyperlinkHelper extends XbaseHyperLinkHelper {
  @Override
  public void createHyperlinksByOffset(final XtextResource resource, final int offset, final IHyperlinkAcceptor acceptor) {
    EObjectAtOffsetHelper _eObjectAtOffsetHelper = this.getEObjectAtOffsetHelper();
    final EObject element = _eObjectAtOffsetHelper.resolveElementAt(resource, offset);
    if ((element instanceof Import)) {
      ResourceSet _resourceSet = resource.getResourceSet();
      final URIConverter uriConverter = _resourceSet.getURIConverter();
      String _ecoreUri = ((Import)element).getEcoreUri();
      final URI uri = URI.createURI(_ecoreUri);
      EObject _eContainer = ((Import)element).eContainer();
      final ITextRegion region = this.getTextRegion(((Language) _eContainer), offset);
      Provider<XtextHyperlink> _hyperlinkProvider = this.getHyperlinkProvider();
      XtextHyperlink _get = _hyperlinkProvider.get();
      final Procedure1<XtextHyperlink> _function = (XtextHyperlink it) -> {
        int _offset = region.getOffset();
        int _plus = (_offset + 7);
        int _length = region.getLength();
        int _minus = (_length - 7);
        Region _region = new Region(_plus, _minus);
        it.setHyperlinkRegion(_region);
        URI _xifexpression = null;
        boolean _isPlatformResource = uri.isPlatformResource();
        if (_isPlatformResource) {
          _xifexpression = uri;
        } else {
          _xifexpression = uriConverter.normalize(uri);
        }
        it.setURI(_xifexpression);
        EObject _eContainer_1 = ((Import)element).eContainer();
        String _name = ((Language) _eContainer_1).getName();
        String _plus_1 = ("Open " + _name);
        String _plus_2 = (_plus_1 + " Ecore file");
        it.setHyperlinkText(_plus_2);
      };
      final XtextHyperlink hyperlink = ObjectExtensions.<XtextHyperlink>operator_doubleArrow(_get, _function);
      acceptor.accept(hyperlink);
    } else {
      super.createHyperlinksByOffset(resource, offset, acceptor);
    }
  }
  
  public ITextRegion getTextRegion(final Language lang, final int offset) {
    final List<INode> nodes = NodeModelUtils.findNodesForFeature(lang, 
      MelangePackage.Literals.LANGUAGE__OPERATORS);
    for (final INode node : nodes) {
      {
        final ITextRegion textRegion = node.getTextRegion();
        boolean _contains = textRegion.contains(offset);
        if (_contains) {
          return textRegion;
        }
      }
    }
    return null;
  }
}
