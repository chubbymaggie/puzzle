package fr.inria.diverse.puzzle.metrics.evaluators.syntax;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

import org.eclipse.emf.ecore.EPackage;

import fr.inria.diverse.k3.sle.common.utils.FamiliesServices;
import fr.inria.diverse.k3.sle.common.vos.ConceptMemberVO;

public class SyntactOverlapping {

	public static String evaluate(ArrayList<EPackage> ePackages){
		Hashtable<String, Integer> membersSizeTable = new Hashtable<String, Integer>();
		
		
		ArrayList<ConceptMemberVO> conceptMemberList = FamiliesServices.getInstance().getConceptMemberMappingList(ePackages);
	
		for (ConceptMemberVO conceptMemberVO : conceptMemberList) {
			if(membersSizeTable.get(conceptMemberVO.getMemberName()) == null)
				membersSizeTable.put(conceptMemberVO.getMemberName(), 1);
			else{
				Integer currentValue = membersSizeTable.get(conceptMemberVO.getMemberName());
				membersSizeTable.put(conceptMemberVO.getMemberName(), currentValue + 1);
			}
		}
		
		int i = 0;
		String answer = "var sets = [";
		Enumeration<String> keys = membersSizeTable.keys();
		while(keys.hasMoreElements()){
			String currentKey = keys.nextElement();
			answer += "{sets : [" + i + "], label : '" + currentKey + "', size : " + membersSizeTable.get(currentKey) + ",}";
			answer += ",\n       ";
			i++;
		}
		
		answer += "       ]";
		
		return answer;
	}
}
