package fr.inria.diverse.puzzle.metrics.specialCharts;

import java.util.ArrayList;

import fr.inria.diverse.k3.sle.common.comparisonOperators.ConceptComparison;
import fr.inria.diverse.k3.sle.common.comparisonOperators.MethodComparison;
import fr.inria.diverse.k3.sle.common.tuples.SemanticNode;
import fr.inria.diverse.k3.sle.common.tuples.SemanticTree;
import fr.inria.diverse.k3.sle.common.tuples.TupleConceptMethodMember;
import fr.inria.diverse.k3.sle.common.tuples.TupleConceptMethodMembers;
import fr.inria.diverse.k3.sle.common.tuples.TupleConceptMethodsMembers;
import fr.inria.diverse.k3.sle.common.tuples.TupleMethodMembers;
import fr.inria.diverse.k3.sle.common.utils.FamiliesServices;
import fr.inria.diverse.melange.metamodel.melange.Language;

public class SemanticalVariabilityTree {

	public static String getVariablesDeclaration(ArrayList<Language> languages, ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator){
		String answer = "";
		ArrayList<TupleConceptMethodMember> conceptMethodMemberList = FamiliesServices.getInstance().getConceptMethodMemberMappingList(languages);
		ArrayList<TupleConceptMethodMembers> conceptMethodMemberGroupList = FamiliesServices.getInstance().getConceptMethodMemberGroupList(conceptMethodMemberList, conceptComparisonOperator, methodComparisonOperator);
		
		ArrayList<TupleConceptMethodsMembers> conceptsGroupMethodMemberGroupList = FamiliesServices.getInstance().getConceptMethodsMembersGroupTupleList(conceptMethodMemberGroupList, conceptComparisonOperator, methodComparisonOperator);
		SemanticTree semanticTree = buildSemanticTree(conceptsGroupMethodMemberGroupList);
		
		answer += "var treeData = [\n";
		String treeString = buildTreeString(semanticTree.getRoot());
		answer += treeString;
		answer += "];\n";
		
		return answer;
	}
	
	private static SemanticTree buildSemanticTree(ArrayList<TupleConceptMethodsMembers> conceptsGroupMethodMemberGroupList){
		SemanticTree tree = new SemanticTree();
		SemanticNode root = new SemanticNode("Family", null);
		tree.setRoot(root);
		
		for (TupleConceptMethodsMembers tupleConceptMethodsMembers : conceptsGroupMethodMemberGroupList) {
			SemanticNode conceptNode = new SemanticNode(tupleConceptMethodsMembers.getConcept().getSimpleName(), root);
			
			for (TupleMethodMembers methodMembers : tupleConceptMethodsMembers.getMethodsMembers()) {
				if(methodMembers.getMembers().size() == 1){
					SemanticNode methodNode = new SemanticNode(methodMembers.getMethod().getSimpleName().replace("Aspect", ""), conceptNode);
					conceptNode.getChilds().add(methodNode);
				}else{
					String nodeName = methodMembers.getMethod().getSimpleName() + " [from:";
					
					boolean first = true;
					for (String member : methodMembers.getMembers()) {
						if(!first) nodeName += " ,";
						nodeName += member;
						first = false;
					}
					nodeName += "]";
					SemanticNode methodNode = new SemanticNode(nodeName, conceptNode);
					conceptNode.getChilds().add(methodNode);
				}
			}
			root.getChilds().add(conceptNode);
		}
		return tree;
	}
	
	private static String buildTreeString(SemanticNode root) {
		String answer = "";
		answer += "          {\n";
		answer += "          \"name\": \"" + root.getLabel() + "\",\n";
		answer += "          \"parent\": \"" + root.getParent() != null ? root.getParent().getLabel() : "null" + "\"";
		
		if(root.getChilds().size() != 0){
			answer += ",\n";
			answer += "          \"children\": [\n";
			boolean first = true;
			for (int i = 0; i < root.getChilds().size(); i++) {
				if(!first) answer += ",\n";
				answer += buildTreeString(root.getChilds().get(i));
				first = false;
			}
			answer += "              ]\n";
		}
		answer += "    }\n";
		return answer;
	}
}
