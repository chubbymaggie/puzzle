package fr.inria.diverse.puzzle.metrics.managers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;

import fr.inria.diverse.k3.sle.common.commands.ConceptComparison;
import fr.inria.diverse.k3.sle.common.commands.GraphPartition;
import fr.inria.diverse.k3.sle.common.commands.MethodComparison;
import fr.inria.diverse.k3.sle.common.comparisonOperators.NamingConceptComparison;
import fr.inria.diverse.melange.metamodel.melange.Language;
import fr.inria.diverse.puzzle.metrics.chartMetrics.MaintananceCosts;
import fr.inria.diverse.puzzle.metrics.chartMetrics.PairwiseRelationshipRatio;
import fr.inria.diverse.puzzle.metrics.specialCharts.InternalDependenciesGraph;
import fr.inria.diverse.puzzle.metrics.specialCharts.FamilyMembershipGraph;
import fr.inria.diverse.puzzle.metrics.specialCharts.SemanticSignatureAndBodyVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.SemanticSignatureVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.SemanticalVariabilityTree;
import fr.inria.diverse.puzzle.metrics.specialCharts.SpecialFamilySemanticChart;
import fr.inria.diverse.puzzle.metrics.specialCharts.SpecialFamilySyntacticChart;
import fr.inria.diverse.puzzle.metrics.specialCharts.SyntacticDeepVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.SyntacticNamingVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.TarjansAlgorithmGraph;

/**
 * Manager responsible to analyze a given set of DSls.  
 * 
 * @author David Mendez-Acuna
 */
public class FamilysMetricManager extends MetricsManager {

	// -----------------------------------------------
	// Constants
	// -----------------------------------------------
	
	public final static String REPORT_PATH_OVERLAPPING_VENN = "Report-Overlapping-Venn.html";
	
	public final static String REPORT_PATH_OVERLAPPING_GRAPH = "Report-Overlapping-Graph.html";
	
	public final static String REPORT_PATH_SEMANTIC_VARIABILITY_TREE = "Report-SemanticVariability.html";
	
	// ------------------------------------------------------
	// Constructor
	// ------------------------------------------------------
	
	public FamilysMetricManager(IProject project) throws Exception{
		super(project);
	}
	
	// ------------------------------------------------------
	// Methods
	// ------------------------------------------------------
	
	/**
	 * Creates the HTML file with the report that displays the commonalities among the set of DSLs. 
	 * @param languages
	 * @throws URISyntaxException
	 * @throws IOException
	 */
	public void createReport1FamilysShape(ArrayList<Language> languages) throws URISyntaxException, IOException{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/" + REPORT_PATH_OVERLAPPING_VENN);
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "reports/" + REPORT_PATH_OVERLAPPING_VENN );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	/**
	 * Creates the .js files containing the data needed by report that displays the commonalities among the set of DSLs. 
	 * @param languages
	 * @throws URISyntaxException
	 * @throws IOException
	 */
	public void createReport1FamilysShapeData(ArrayList<Language> languages) throws Exception {
		File syntacticVennData = new File(project.getLocation().toString() + "/libVenn/syntacticVennData.jsonp" );
		if(!syntacticVennData.exists())
			syntacticVennData.createNewFile();
		PrintWriter out = new PrintWriter( syntacticVennData );
		SpecialFamilySyntacticChart syntacticVennDiagram = new SyntacticNamingVennDiagram();
        out.print(syntacticVennDiagram.getVariablesDeclaration(languages, null));
        out.close();
        
        File syntacticDeepVennData = new File(project.getLocation().toString() + "/libVenn/syntacticDeepVennData.jsonp" );
		if(!syntacticDeepVennData.exists())
			syntacticDeepVennData.createNewFile();
		PrintWriter outSyntacticDeepVennData = new PrintWriter( syntacticDeepVennData );
		SpecialFamilySyntacticChart syntacticDeepVennDiagram = new SyntacticDeepVennDiagram();
		outSyntacticDeepVennData.print(syntacticDeepVennDiagram.getVariablesDeclaration(languages, null));
		outSyntacticDeepVennData.close();
        
        File semanticVennData = new File(project.getLocation().toString() + "/libVenn/semanticVennData.jsonp" );
		if(!semanticVennData.exists())
			semanticVennData.createNewFile();
		PrintWriter outSemanticVennData = new PrintWriter( semanticVennData );
		SpecialFamilySemanticChart semanticalVennDiagram = new SemanticSignatureVennDiagram();
		outSemanticVennData.print(semanticalVennDiagram.getVariablesDeclaration(languages, new NamingConceptComparison(), null));
		outSemanticVennData.close();
		
		 File semanticSignatureAndBodyVennData = new File(project.getLocation().toString() + "/libVenn/semanticSignatureAndBodyVennData.jsonp" );
			if(!semanticSignatureAndBodyVennData.exists())
				semanticSignatureAndBodyVennData.createNewFile();
			PrintWriter outSemanticSignatureAndBodyVennData = new PrintWriter( semanticSignatureAndBodyVennData );
			SpecialFamilySemanticChart semanticalSignatureAndBodyVennDiagram = new SemanticSignatureAndBodyVennDiagram();
			outSemanticSignatureAndBodyVennData.print(semanticalSignatureAndBodyVennDiagram.getVariablesDeclaration(languages, new NamingConceptComparison(), null));
			outSemanticSignatureAndBodyVennData.close();
	}
	
	
	public void createReport2CostSaving(ArrayList<Language> languages) throws URISyntaxException, IOException{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/Report-2-CostSavingsMetrics.html");
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/Report-2-CostSavingsMetrics.html" );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	public void createReport2CostSavingData(ArrayList<Language> languages, 
			ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator, GraphPartition graphPartition) throws Exception{
        File fileReport = new File(project.getLocation().toString() + "/lib/costSavingMetrics.js" );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print((new MaintananceCosts()).getVariablesDeclaration(languages, conceptComparisonOperator, methodComparisonOperator, graphPartition));
		outRileReport.close();
	}
	
	public void createReport3ReuseMetrics(ArrayList<Language> languages) throws URISyntaxException, IOException{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/Report-ReuseMetrics.html");
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        content = content.replace("<!-- Coucou! REPLACE ME WITH THE CORRECT PATTERN -->", (new PairwiseRelationshipRatio()).getTables(languages));
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/Report-ReuseMetrics.html" );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	/**
	 * Creates the file the the instructions to draw the graph that shows the graph grouping using the family membership criterion.
	 * @param targetProject. The project where the file should be created.
	 * @param languages. The set of languages belonging to the family under study.
	 * @throws Exception
	 */
	public void createDependenciesGraph(ArrayList<Language> languages) throws Exception{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/Report-4a-DependenciesGraph.html");
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/Report-4a-DependenciesGraph.html" );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	/**
	 * Creates the file with the data input of the graph that shows the graph grouping using the family membership criterion.
	 * @param targetProject. The project where the file should be created.
	 * @param languages. The set of languages belonging to the family under study.
	 * @param conceptComparisonOperator
	 * @param methodComparisonOperator
	 * @throws Exception
	 */
	public void createDependenciesGraphData(ArrayList<Language> languages, 
			ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator) throws Exception{
		File generalMetrics = new File(project.getLocation().toString() + "/lib/dependenciesGraph.js" );
		if(!generalMetrics.exists())
			generalMetrics.createNewFile();
		PrintWriter outMetrics = new PrintWriter( generalMetrics );
		SpecialFamilySyntacticChart internalDependenciesGraph = new InternalDependenciesGraph();
		outMetrics.print(internalDependenciesGraph.getVariablesDeclaration(languages, conceptComparisonOperator));
		outMetrics.close();
	}
	
	
	/**
	 * Creates the file the the instructions to draw the graph that shows the graph grouping using the family membership criterion.
	 * @param targetProject. The project where the file should be created.
	 * @param languages. The set of languages belonging to the family under study.
	 * @throws Exception
	 */
	public void createFamilyMembershipGraph(ArrayList<Language> languages) throws Exception{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/" + REPORT_PATH_OVERLAPPING_GRAPH);
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/" + REPORT_PATH_OVERLAPPING_GRAPH );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	/**
	 * Creates the file with the data input of the graph that shows the graph grouping using the family membership criterion.
	 * @param targetProject. The project where the file should be created.
	 * @param languages. The set of languages belonging to the family under study.
	 * @param conceptComparisonOperator
	 * @param methodComparisonOperator
	 * @throws Exception
	 */
	public void createFamilyMembershipGraphData(ArrayList<Language> languages, 
			ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator) throws Exception{
		File generalMetrics = new File(project.getLocation().toString() + "/lib/graph.js" );
		if(!generalMetrics.exists())
			generalMetrics.createNewFile();
		PrintWriter outMetrics = new PrintWriter( generalMetrics );
		SpecialFamilySyntacticChart internalDependenciesGraph = new FamilyMembershipGraph();
		outMetrics.print(internalDependenciesGraph.getVariablesDeclaration(languages, conceptComparisonOperator));
		outMetrics.close();
	}
	
	/**
	 * Creates the file the the instructions to draw the graph that shows the graph grouping using the family membership criterion.
	 * @param targetProject. The project where the file should be created.
	 * @param languages. The set of languages belonging to the family under study.
	 * @throws Exception
	 */
	public void createTarjansGraph(ArrayList<Language> languages) throws Exception{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/Report-4c-TarjansGraph.html");
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/Report-4c-TarjansGraph.html" );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	/**
	 * Creates the file with the data input of the graph that shows the graph grouping using the family membership criterion.
	 * @param targetProject. The project where the file should be created.
	 * @param languages. The set of languages belonging to the family under study.
	 * @param conceptComparisonOperator
	 * @param methodComparisonOperator
	 * @throws Exception
	 */
	public void createTarjansGraphData(ArrayList<Language> languages, 
			ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator) throws Exception{
		File generalMetrics = new File(project.getLocation().toString() + "/lib/tarjansGraph.js" );
		if(!generalMetrics.exists())
			generalMetrics.createNewFile();
		PrintWriter outMetrics = new PrintWriter( generalMetrics );
		SpecialFamilySyntacticChart tarjansAlgorithmGraph = new TarjansAlgorithmGraph();
		outMetrics.print(tarjansAlgorithmGraph.getVariablesDeclaration(languages, conceptComparisonOperator));
		outMetrics.close();
	}
	
	public void copyAnalysisSemanticsData(ArrayList<Language> languages, 
			ConceptComparison conceptComparisonOperator, MethodComparison methodComparisonOperator) throws Exception{
		File generalMetrics = new File(project.getLocation().toString() + "/lib/semanticAnalysis.js" );
		if(!generalMetrics.exists())
			generalMetrics.createNewFile();
		PrintWriter outMetrics = new PrintWriter( generalMetrics );
		SpecialFamilySemanticChart semanticalVariabilityTree = new SemanticalVariabilityTree();
		outMetrics.print(semanticalVariabilityTree.getVariablesDeclaration(languages, conceptComparisonOperator, methodComparisonOperator));
		outMetrics.close();
	}
	
	public void copyAnalysisSemantics(ArrayList<Language> languages) throws URISyntaxException, IOException{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/" + REPORT_PATH_SEMANTIC_VARIABILITY_TREE);
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/" + REPORT_PATH_SEMANTIC_VARIABILITY_TREE );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	public void createReport1LargeAnalysis(ArrayList<Language> languages) throws URISyntaxException, IOException{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/Report-1-LargeAnalysis.html");
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = null;
        
        if(project != null)
        	fileReport = new File(project.getLocation().toString() + "/Report-1-LargeAnalysis.html" );
        else{
        	String pathReport = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getLocation().replace("file:", "").replace("reference:", "");
            fileReport = new File(pathReport + "Report-1-LargeAnalysis.html");
        }
        
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
}
