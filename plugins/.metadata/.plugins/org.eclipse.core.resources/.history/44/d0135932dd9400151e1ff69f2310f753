// automatically generated by Xtext
grammar fr.inria.diverse.puzzle.Multivar with org.eclipse.xtext.common.Terminals

import "http://fr.inria.diverse.puzzle.synvar.metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LanguageProductLine returns LanguageProductLine:
	{LanguageProductLine}
		('import' implementationFile=EString)?
		
		('features' productLineVariability=ProductLineVariability)?
		('variationpoints' languageVariability=LanguageVariability)?
	;

EString returns ecore::EString:
	STRING | ID;

ProductLineVariability returns ProductLineVariability:
	'{'
		'root' rootFeature=[LanguageFeature|EString]
		features+=LanguageFeature ( features+=LanguageFeature )*
	'}';

LanguageVariability returns LanguageVariability:
	{LanguageVariability}
	'{'
		(variabilityPoints+=VariabilityPoint ( variabilityPoints+=VariabilityPoint)* )?
	'}';

LanguageFeature returns LanguageFeature:
	{LanguageFeature}
	(abstract?='abstract')?
	'languagefeature'
	name=EString
		('requires' depends+=[LanguageFeature|EString] ( "," depends+=[LanguageFeature|EString])* )?
		('excludes' excludes+=[LanguageFeature|EString] ( "," excludes+=[LanguageFeature|EString])* )?
	'{'
		('languagemodule' module=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

VariabilityPoint returns VariabilityPoint:
	'variabilitypoint'
	name=EString ('involves' involvedFeatures+=[LanguageFeature|EString] ( "," involvedFeatures+=[LanguageFeature|EString])* )?
	'{'
		variations+=Variation ( "," variations+=Variation)*
	'}';

Variation returns Variation:
	{Variation}
	'variation'
	name=EString
	'{'
		('languagemodule' module=EString)?
	'}';
