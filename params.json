{"name":"Puzzle","tagline":"Tool Support for Language Product Lines Engineering","body":"### Language Product Lines Engineering in a Nutshell\r\nThe adoption of **language-oriented software development** relies on the availability of the DSLS needed to express all the aspects of a system under construction. This implies the development of many DSLs which is a challenging task due to the specialized knowledge and skills it requires. As a matter of fact, the ultimate value of DSLs has been severely limited by the cost of the associated tooling (i.e., editors, parsers, etc) [[Jézéquel:2015]](http://link.springer.com/chapter/10.1007/978-3-319-11617-4_1). \r\n\r\n  To improve cost-benefit when using DSLs, the research community in software languages engineering has proposed mechanisms to increase reuse during the construction of DSLs. The idea is to leverage previous engineering efforts and minimize implementation from scratch [[Krahn:2010]](http://link.springer.com/article/10.1007%2Fs10009-010-0142-1). These reuse mechanisms are based on the premise that **“software languages are software too”** [[Favre:2011]](http://link.springer.com/chapter/10.1007%2F978-3-642-19440-5_21) so it is possible to use software engineering techniques to facilitate their construction. In particular, there are approaches that take ideas from Component-Based Software Engineering (CBSE) and Software Product Lines Engineering (SPLE) during the construction of new DSLs. Indeed, the notion of language product line (a software product line where products are languages) has been recently introduced [[Zschaler:2010]](http://link.springer.com/chapter/10.1007%2F978-3-642-12107-4_7). We are facing an emerging approach in the construction of DSLs: Language Product Lines Engineering (**L-PLE**).\r\n\r\nThe figure below illustrates how the Software Product Lines Engineering approach can be adapted to the construction of software languages, in particular DSLs, by supporting **Languages Modularization** and **Languages Variability Management**. \r\n\r\n<img src=https://github.com/damende/puzzle/blob/master/website-sources/lple.jpg?raw=true width=520 height=240 />\r\n\r\n### A bottom-up perspective for L-PLE\r\nIn practice, however, reuse is rarely achieved as a result of monolithic processes where language designers defined language modules and variability models while trying to predict that they will be useful in the construction of feature DSLs. Rather, the exploitation of reuse is often an iterative process where reuse opportunities are discovered during the construction of individual DSLs in the form of replicated functionalities that can be extracted as reusable language modules. \r\n\r\nWe propose an approach to build language product lines by means of **reverse-engineering processes** that permit to extract reusable language modules from legacy DSLs as well as to synthesize variability models to capture commonalities and particularities. \r\n\r\n### Puzzle: A tool for reverse-engineering L-PLs\r\nPuzzle is a set of tools intended to support reverse engineering of language product lines. So far, Puzzle provides: (1) analysis mechanisms for analyzing potential reuse in sets of domain-specific languages; (2) reverse-engineering strategies for synthesizing language product lines from sets of domain-specific languages. \r\n\r\nYou can now download the Puzzle's source code as well as a set of examples and tool demos. All the required information is provided below:\r\n\r\n**Tool demonstrations**\r\n\r\nLet us illustrate the capabilities of Puzzle by means of some short videos.\r\n\r\n**Downloading and configuration**\r\n* For the **impatient**, we have prepared a virtual machine image that includes all the tooling and configuration needed to use Puzzle. Just download it, open the pre-installed Eclipse IDE, and try the examples. You need [VirtualBox](https://www.virtualbox.org/).\r\n* For **those who have some more time**, we have prepared a tutorial to download and configure Puzzle from scratch. \r\n\r\n**Examples**\r\n\r\n* A heterogeneous example: State Machines, Logo, and Flowcharts.\r\n* A family of DSLs for State Machines: UML state diagrams, Rhapsody, and Harel's statecharts.\r\n* Empirical study: Evaluating potential reuse in the wild.\r\n\r\n### Authors and Contributors\r\n* [David Méndez Acuña](http://damenac.snack.ws/)\r\n* [José A. Galindo](https://www.linkedin.com/in/jos%C3%A9-%C3%A1ngel-galindo-duarte-131b8322/en)\r\n* [Thomas Degueule](http://people.irisa.fr/Thomas.Degueule/)\r\n* [Benoit Combemale](http://people.irisa.fr/Benoit.Combemale/)\r\n\r\n### Publications\r\n* Jean-Marc Jézéquel, David Méndez-Acuña, Thomas Degueule, Benoit Combemale, Olivier Barais. **When Systems Engineering Meets Language Engineering**. In Complex Systems Design & Management (CSD&M'14), Springer, 2014.\r\n* David Méndez-Acuña. **Variability Management in Domain-Specific Languages**. Doctoral Symposium ACM/IEEE 17th International Conference on Model-Driven Engineering Languages and Systems. Valencia, Spain. 2014. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}