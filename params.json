{"name":"Puzzle","tagline":"Tool Support for Language Product Lines Engineering","body":"### Language Product Lines Engineering in a Nutshell\r\nThe adoption of **language-oriented software development** relies on the availability of the DSLS needed to express all the aspects of a system under construction. This implies the development of many DSLs which is a challenging task due to the specialized knowledge and skills it requires. As a matter of fact, the ultimate value of DSLs has been severely limited by the cost of the associated tooling (i.e., editors, parsers, etc) [[Jézéquel:2015]](http://link.springer.com/chapter/10.1007/978-3-319-11617-4_1). \r\n\r\n  To improve cost-benefit when using DSLs, the research community in soft- ware languages engineering has proposed mechanisms to increase reuse during the construction of DSLs. The idea is to leverage previous engineering efforts and minimize implementation from scratch [[Krahn:2010]](http://link.springer.com/article/10.1007%2Fs10009-010-0142-1). These reuse mechanisms are based on the premise that **“software languages are software too”** [[Favre:2011]](http://link.springer.com/chapter/10.1007%2F978-3-642-19440-5_21) so it is possible to use software engineering techniques to facilitate their construction [9]. In particular, there are approaches that take ideas from Component-Based Software Engineering (CBSE) [2] and Software Product Lines Engineering (SPLE) [16] during the construction of new DSLs. Indeed, the notion of language product line (a software product line where products are languages) has been recently introduced. \r\n\r\n<img src=https://github.com/damende/puzzle/blob/master/website-sources/lple.jpg?raw=true width=500 height=240 />\r\n\r\n### Puzzle in action\r\nPuzzle is a set of tools intended to support Language Product Lines Engineering. More concretely, Puzzle provides: (1) analysis mechanisms for analyzing potential reuse in sets of domain-specific languages; (2) reverse-engineering strategies for synthesizing language product lines from sets of domain-specific languages. \r\n\r\nYou can now download the Puzzle's source code as well as a set of examples and tool demos. All the required information is provided below:\r\n\r\n**Tool demonstrations**\r\n\r\nLet us illustrate the capabilities of Puzzle by means of some short videos.\r\n\r\n**Downloading and configuration**\r\n* For the **impatient**, we have prepared a virtual machine image that includes all the tooling and configuration needed to use Puzzle. Just download it, open the pre-installed Eclipse IDE, and try the examples. You need [VirtualBox](https://www.virtualbox.org/).\r\n* For **those who have some more time**, we have prepared a tutorial to download and configure Puzzle from scratch. \r\n\r\n**Examples**\r\n\r\n* A heterogeneous example: State Machines, Logo, and Flowcharts.\r\n* A family of DSLs for State Machines: UML state diagrams, Rhapsody, and Harel's statecharts.\r\n* Empirical study: Evaluating potential reuse in the wild.\r\n\r\n### Authors and Contributors\r\n* [David Méndez Acuña](http://damenac.snack.ws/)\r\n* [José A. Galindo](https://www.linkedin.com/in/jos%C3%A9-%C3%A1ngel-galindo-duarte-131b8322/en)\r\n* [Thomas Degueule](http://people.irisa.fr/Thomas.Degueule/)\r\n* [Benoit Combemale](http://people.irisa.fr/Benoit.Combemale/)\r\n\r\n### Publications\r\n* Jean-Marc Jézéquel, David Méndez-Acuña, Thomas Degueule, Benoit Combemale, Olivier Barais. **When Systems Engineering Meets Language Engineering**. In Complex Systems Design & Management (CSD&M'14), Springer, 2014.\r\n* David Méndez-Acuña. **Variability Management in Domain-Specific Languages**. Doctoral Symposium ACM/IEEE 17th International Conference on Model-Driven Engineering Languages and Systems. Valencia, Spain. 2014. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}