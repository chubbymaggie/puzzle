package family.flowchart.adapters.flowchartmt;

import family.flowchart.adapters.flowchartmt.ActionAdapter;
import family.flowchart.adapters.flowchartmt.ArcAdapter;
import family.flowchart.adapters.flowchartmt.ArithmeticExpressionAdapter;
import family.flowchart.adapters.flowchartmt.BoolLitAdapter;
import family.flowchart.adapters.flowchartmt.ConstraintAdapter;
import family.flowchart.adapters.flowchartmt.DecisionAdapter;
import family.flowchart.adapters.flowchartmt.ExpressionAdapter;
import family.flowchart.adapters.flowchartmt.FlowchartAdapter;
import family.flowchart.adapters.flowchartmt.IntegerLitAdapter;
import family.flowchart.adapters.flowchartmt.LiteralAdapter;
import family.flowchart.adapters.flowchartmt.NodeAdapter;
import family.flowchart.adapters.flowchartmt.RelationalConstraintAdapter;
import family.flowchart.adapters.flowchartmt.RelationalExpressionAdapter;
import family.flowchart.adapters.flowchartmt.StringLitAdapter;
import family.flowchart.adapters.flowchartmt.SubflowAdapter;
import family.flowchart.adapters.flowchartmt.VarReferenceAdapter;
import fr.inria.diverse.melange.adapters.AdaptersFactory;
import fr.inria.diverse.melange.adapters.EObjectAdapter;
import java.util.WeakHashMap;
import org.eclipse.emf.ecore.EObject;

@SuppressWarnings("all")
public class FlowchartMTAdaptersFactory implements AdaptersFactory {
  private static FlowchartMTAdaptersFactory instance;
  
  private WeakHashMap<EObject, EObjectAdapter> register;
  
  public FlowchartMTAdaptersFactory() {
    register = new WeakHashMap();
  }
  
  public static FlowchartMTAdaptersFactory getInstance() {
    if (instance == null) {
    	instance = new family.flowchart.adapters.flowchartmt.FlowchartMTAdaptersFactory() ;
    }
    return instance ;
  }
  
  public EObjectAdapter createAdapter(final EObject o) {
    EObjectAdapter res = register.get(o);
    if(res != null){
    	 return res;
    }
    else{
    	if (o instanceof flowchart.Flowchart){
    		res = createFlowchartAdapter((flowchart.Flowchart) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Arc){
    		res = createArcAdapter((flowchart.Arc) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Subflow){
    		res = createSubflowAdapter((flowchart.Subflow) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Action){
    		res = createActionAdapter((flowchart.Action) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Decision){
    		res = createDecisionAdapter((flowchart.Decision) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.RelationalConstraint){
    		res = createRelationalConstraintAdapter((flowchart.RelationalConstraint) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Constraint){
    		res = createConstraintAdapter((flowchart.Constraint) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.VarReference){
    		res = createVarReferenceAdapter((flowchart.VarReference) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Expression){
    		res = createExpressionAdapter((flowchart.Expression) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.IntegerLit){
    		res = createIntegerLitAdapter((flowchart.IntegerLit) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.StringLit){
    		res = createStringLitAdapter((flowchart.StringLit) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.BoolLit){
    		res = createBoolLitAdapter((flowchart.BoolLit) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.Literal){
    		res = createLiteralAdapter((flowchart.Literal) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.ArithmeticExpression){
    		res = createArithmeticExpressionAdapter((flowchart.ArithmeticExpression) o) ;
    		register.put(o,res);
    		return res;
    	}
    	if (o instanceof flowchart.RelationalExpression){
    		res = createRelationalExpressionAdapter((flowchart.RelationalExpression) o) ;
    		register.put(o,res);
    		return res;
    	}
    }
    
    return null ;
  }
  
  public FlowchartAdapter createFlowchartAdapter(final flowchart.Flowchart adaptee) {
    family.flowchart.adapters.flowchartmt.FlowchartAdapter adap = new family.flowchart.adapters.flowchartmt.FlowchartAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public NodeAdapter createNodeAdapter(final flowchart.Node adaptee) {
    family.flowchart.adapters.flowchartmt.NodeAdapter adap = new family.flowchart.adapters.flowchartmt.NodeAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public ArcAdapter createArcAdapter(final flowchart.Arc adaptee) {
    family.flowchart.adapters.flowchartmt.ArcAdapter adap = new family.flowchart.adapters.flowchartmt.ArcAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public SubflowAdapter createSubflowAdapter(final flowchart.Subflow adaptee) {
    family.flowchart.adapters.flowchartmt.SubflowAdapter adap = new family.flowchart.adapters.flowchartmt.SubflowAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public ActionAdapter createActionAdapter(final flowchart.Action adaptee) {
    family.flowchart.adapters.flowchartmt.ActionAdapter adap = new family.flowchart.adapters.flowchartmt.ActionAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public DecisionAdapter createDecisionAdapter(final flowchart.Decision adaptee) {
    family.flowchart.adapters.flowchartmt.DecisionAdapter adap = new family.flowchart.adapters.flowchartmt.DecisionAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public ConstraintAdapter createConstraintAdapter(final flowchart.Constraint adaptee) {
    family.flowchart.adapters.flowchartmt.ConstraintAdapter adap = new family.flowchart.adapters.flowchartmt.ConstraintAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public RelationalConstraintAdapter createRelationalConstraintAdapter(final flowchart.RelationalConstraint adaptee) {
    family.flowchart.adapters.flowchartmt.RelationalConstraintAdapter adap = new family.flowchart.adapters.flowchartmt.RelationalConstraintAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public ExpressionAdapter createExpressionAdapter(final flowchart.Expression adaptee) {
    family.flowchart.adapters.flowchartmt.ExpressionAdapter adap = new family.flowchart.adapters.flowchartmt.ExpressionAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public LiteralAdapter createLiteralAdapter(final flowchart.Literal adaptee) {
    family.flowchart.adapters.flowchartmt.LiteralAdapter adap = new family.flowchart.adapters.flowchartmt.LiteralAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public IntegerLitAdapter createIntegerLitAdapter(final flowchart.IntegerLit adaptee) {
    family.flowchart.adapters.flowchartmt.IntegerLitAdapter adap = new family.flowchart.adapters.flowchartmt.IntegerLitAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public StringLitAdapter createStringLitAdapter(final flowchart.StringLit adaptee) {
    family.flowchart.adapters.flowchartmt.StringLitAdapter adap = new family.flowchart.adapters.flowchartmt.StringLitAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public BoolLitAdapter createBoolLitAdapter(final flowchart.BoolLit adaptee) {
    family.flowchart.adapters.flowchartmt.BoolLitAdapter adap = new family.flowchart.adapters.flowchartmt.BoolLitAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public ArithmeticExpressionAdapter createArithmeticExpressionAdapter(final flowchart.ArithmeticExpression adaptee) {
    family.flowchart.adapters.flowchartmt.ArithmeticExpressionAdapter adap = new family.flowchart.adapters.flowchartmt.ArithmeticExpressionAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public RelationalExpressionAdapter createRelationalExpressionAdapter(final flowchart.RelationalExpression adaptee) {
    family.flowchart.adapters.flowchartmt.RelationalExpressionAdapter adap = new family.flowchart.adapters.flowchartmt.RelationalExpressionAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
  
  public VarReferenceAdapter createVarReferenceAdapter(final flowchart.VarReference adaptee) {
    family.flowchart.adapters.flowchartmt.VarReferenceAdapter adap = new family.flowchart.adapters.flowchartmt.VarReferenceAdapter() ;
    adap.setAdaptee(adaptee) ;
    return adap ;
  }
}
