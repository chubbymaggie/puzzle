package Logo.logoprogram;

import Logo.PenUp;
import Logo.logoprogram.PenUpAspectPenUpAspectProperties;
import Logo.logoprogram.PrimitiveAspect;
import fr.inria.diverse.k3.al.annotationprocessor.Aspect;
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod;

@Aspect(className = PenUp.class)
@SuppressWarnings("all")
public class PenUpAspect extends PrimitiveAspect {
  @OverrideAspectMethod
  public static int eval(final PenUp _self, final Context context) {
    Logo.logoprogram.PenUpAspectPenUpAspectProperties _self_ = Logo.logoprogram.PenUpAspectPenUpAspectContext.getSelf(_self);
    Object result = null;
     if (_self instanceof Logo.PenUp){
    result = Logo.logoprogram.PenUpAspect._privk3_eval(_self_, (Logo.PenUp)_self,context);
    } else  { throw new IllegalArgumentException("Unhandled parameter types: " + java.util.Arrays.<Object>asList(_self).toString()); };
    return (int)result;
  }
  
  private static int super_eval(final PenUp _self, final Context context) {
    Logo.logoprogram.PrimitiveAspectPrimitiveAspectProperties _self_ = Logo.logoprogram.PrimitiveAspectPrimitiveAspectContext.getSelf(_self);
    return  Logo.logoprogram.PrimitiveAspect._privk3_eval(_self_, _self,context);
  }
  
  protected static int _privk3_eval(final PenUpAspectPenUpAspectProperties _self_, final PenUp _self, final Context context) {
    throw new Error("Unresolved compilation problems:"
      + "\nturtle cannot be resolved"
      + "\nsetPenUp cannot be resolved");
  }
}
