package family.rhapsody.adapters.rhapsodymt;

import family.rhapsody.adapters.rhapsodymt.RhapsodyMTAdaptersFactory;
import family.rhapsodymt.Expression;
import family.rhapsodymt.RelationalExpression;
import family.rhapsodymt.RelationalOperator;
import fr.inria.diverse.melange.adapters.EObjectAdapter;
import java.util.Map;

@SuppressWarnings("all")
public class RelationalExpressionAdapter extends /* EObjectAdapter<rhapsody.RelationalExpression> */ implements RelationalExpression {
  private RhapsodyMTAdaptersFactory adaptersFactory;
  
  public RelationalExpressionAdapter() {
    super(family.rhapsody.adapters.rhapsodymt.RhapsodyMTAdaptersFactory.getInstance()) ;
  }
  
  @Override
  public RelationalOperator getOperator() {
    return family.rhapsodymt.RelationalOperator.get(adaptee.getOperator().getValue());
  }
  
  @Override
  public void setOperator(final RelationalOperator o) {
    adaptee.setOperator(rhapsody.RelationalOperator.get(o.getValue())) ;
  }
  
  @Override
  public Expression getLeft() {
    return adaptersFactory.createExpressionAdapter(adaptee.getLeft()) ;
  }
  
  @Override
  public void setLeft(final Expression o) {
    adaptee.setLeft(((family.rhapsody.adapters.rhapsodymt.ExpressionAdapter) o).getAdaptee()) ;
  }
  
  @Override
  public Expression getRight() {
    return adaptersFactory.createExpressionAdapter(adaptee.getRight()) ;
  }
  
  @Override
  public void setRight(final Expression o) {
    adaptee.setRight(((family.rhapsody.adapters.rhapsodymt.ExpressionAdapter) o).getAdaptee()) ;
  }
  
  @Override
  public Object obtainValue(final Map context) {
    return adaptee.obtainValue(context
    ) ;
  }
}
