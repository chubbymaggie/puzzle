package logo.semantics;

import Logo.Left;
import fr.inria.diverse.k3.al.annotationprocessor.Aspect;
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod;
import logo.semantics.LeftAspectLeftAspectProperties;
import logo.semantics.PrimitiveAspect;

@Aspect(className = Left.class)
@SuppressWarnings("all")
public class LeftAspect extends PrimitiveAspect {
  @OverrideAspectMethod
  public static int eval(final Left _self, final Context context) {
    logo.semantics.LeftAspectLeftAspectProperties _self_ = logo.semantics.LeftAspectLeftAspectContext.getSelf(_self);
    Object result = null;
     if (_self instanceof Logo.Left){
    result = logo.semantics.LeftAspect._privk3_eval(_self_, (Logo.Left)_self,context);
    } else  { throw new IllegalArgumentException("Unhandled parameter types: " + java.util.Arrays.<Object>asList(_self).toString()); };
    return (int)result;
  }
  
  private static int super_eval(final Left _self, final Context context) {
    logo.semantics.PrimitiveAspectPrimitiveAspectProperties _self_ = logo.semantics.PrimitiveAspectPrimitiveAspectContext.getSelf(_self);
    return  logo.semantics.PrimitiveAspect._privk3_eval(_self_, _self,context);
  }
  
  protected static int _privk3_eval(final LeftAspectLeftAspectProperties _self_, final Left _self, final Context context) {
    throw new Error("Unresolved compilation problems:"
      + "\nturtle cannot be resolved"
      + "\nrotate cannot be resolved");
  }
}
